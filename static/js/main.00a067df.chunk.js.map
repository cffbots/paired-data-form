{"version":3,"sources":["ForeignKeyField.tsx","oneOfSplat.tsx","GeneSpectraTable.tsx","expanders/ExtractionExpander.tsx","expanders/GenomeExpander.tsx","expanders/InstrumentExpander.tsx","expanders/SampleGrowthConditionsExpander.tsx","textTable.ts","GenomeMetabolomicsTable.tsx","PairedDataRecord.tsx","validate.ts","App.tsx","GenomeMetabolomeLinksField.tsx","serviceWorker.ts","index.tsx"],"names":["ForeignKeyField","_React$Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","open","options","handleChange","option","props","onChange","value","loadOptions","uiSchema","foreignKey","search","name","map","v","label","onOpen","setState","onClose","event","inherits","createClass","key","field","react","className","onClick","formData","Glyphicon","glyph","react_select_esm","defaultValue","menuIsOpen","schema","title","description","React","oneOfSplat","prop","offset","splat","Map","dependencies","oneOf","forEach","d","keys","properties","filter","p","set","size","GeneSpectraTable","data","BGC_MS2_links","mySchema","items","myProps","cols","headers","i","push","bgcSplat","BGC_ID","bgcCols","from","depSplat","values","depCols","rows","r","tds","c","ci","join","bgcTds","depTds","Table","condensed","striped","bordered","colSpan","ExtractionExpander","fk","foreignTable","labelField","lookup","experimental","s","row","foreignItem","find","td","tdi","k","textColsOf","solventSchema","solvent","solventName","anyOf","enum","Other_solvent","ratio","sep","href","_this2","GenomeExpander","oneOfs","nested","indexOf","lvl1","nestedValues","InstrumentExpander","htmlCols","typeSchema","modeSchema","typeLabel","instrument","instrumentation","other_instrument","modeLabel","SampleGrowthConditionsExpander","mediumCols","medium_type","medium","mediumSchema","envSchema","environment","mediumTypeCol","mediumLabel","Other_medium","envLabel","Other_environment","unshift","tsvExport","expanders","gmProps","genome_metabolome_links","foreignKeys","Set","e","has","h","textRow","textCols","toConsumableArray","textTable","tsvUrl","bj","btoa","label2value","hit","jsonDocument","genomes","genomeLabels","samplePreparations","samplePreparationLabels","extractionMethods","extractionMethodLabels","instrumentationMethods","instrumentationMethodLabels","gmRows","metabolomicsFile","genomeLabel","genome","genome_ID","genome_type","genome_label","genbankAccession","GenBank_accession","refseqAccession","RefSeq_accession","ena","ENA_NCBI_accession","mgnify","MGnify_accession","biosample","BioSample_accession","pubs","publications","collapseGenome","add","samplePreparationLabel","sample","sample_preparation_method","medium_details","type","mediumValue","sample_preparation","temp","growth_temperature","aeration","Aeration","growingTime","growing_time","phase","growth_phase_OD","cond","other_growth_conditions","metagenomeLabel","metagenomeValue","metagenome_details","metadesc","metagenomic_sample_description","collapseSamplePreparation","extractionMethodLabel","extract","extraction_method","solvents","split","solventString","_solventString$split","_solventString$split2","slicedToArray","solventLabel","solventValue","extraction_methods","parseFloat","other","other_extraction_parameters","collapseExtractionMethod","instrumentationMethodLabel","instr","instrumentation_method","instrTypeLabel","Instrumentation","instrTypeValue","instrumentation_methods","column","mode","range","coll","collision_energy","buf","Buffering","buffering","other_instrumentation","collapseInstrumentationMethod","metabolomics_file","sample_preparation_label","extraction_method_label","instrumentation_method_label","version","personal","metabolomics","GenomeMetabolomicsTable","genomeExpander","sampleExpander","extractionExpander","instrumentExpander","genomeHeaders","ths","sampleHeaders","extractionHeaders","instrumentHeaders","genomeTds","sampleTds","extractionTds","instrumentTds","genomemetabolometsvfn","GNPSMassIVE_ID","_React$useState","_React$useState2","isCollapsed","changeCollapsing","columnIndexesToShowCollapsed","splice","children","Button","bsSize","download","PairedDataRecord","dataUrl","mimeType","undefined","JSON","stringify","record2dataUrl","submitterProps","submitter","metabolomeProps","metabolome","filename","GenomeMetabolomicsTable_GenomeMetabolomicsTable","GeneSpectraTable_GeneSpectraTable","foreignKeySearch","app","requiredProp","labelSearcher","form","formRef","current","doc","Error","sampleLabels","extractionLabels","instrumentLabels","ms2Labels","findDuplicates","labels","index","validateDocument","errors","reduce","addError","gmIds","spIds","emIds","imIds","genomeMetabolomeLink","includes","msUrls","geneSpectraLink","MS2_URL","formFields","collapsible","CollapsibleField","gmarray","uploadRef","ArrayField_default","a","click","accept","target","files","file","reader","FileReader","onload","result","tsvParse","formContext","uploadGenomeMetabolomeLinks","readAsText","ref","style","display","App","initDoc","validDoc","onSubmit","_ref","onReset","onError","PI_email","PI_institution","PI_name","submitter_email","submitter_institution","submitter_name","MaSSIVE_URL","fillForm","onUpload","fillFormFromFile","evt","parse","loadExample1","fetch","then","json","submit","injectForeignKeySearchMethods","lib_default","fields","validate","ButtonToolbar","ButtonGroup","bsStyle","PairedDataRecord_PairedDataRecord","Boolean","window","location","hostname","match","ReactDOM","render","react_default","createElement","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.00a067df.chunk.js","sourcesContent":["import * as React from \"react\";\n\nimport { Glyphicon } from \"react-bootstrap\";\nimport { FieldProps } from \"react-jsonschema-form\";\nimport Select from \"react-select\";\n\nexport class ForeignKeyField extends React.Component<FieldProps, {}> {\n  public state = {\n    open: false,\n    options: []\n  };\n\n  public handleChange = (option: any) => {\n    this.props.onChange(option.value);\n  };\n\n  public loadOptions = () => {\n    const values = this.props.uiSchema.foreignKey.search(this.props.name);\n    return values.map((v: string) => {\n      return { value: v, label: v };\n    });\n  };\n\n  public render() {\n    let field = (\n      <span className=\"form-control\" onClick={this.onOpen}>\n        {this.props.formData || \"Click to select\"}\n        <span className=\"pull-right\">\n          <Glyphicon glyph=\"chevron-down\" />\n        </span>\n      </span>\n    );\n    if (this.state.open && this.state.options.length > 0) {\n      field = (\n        <Select\n          defaultValue={this.props.formData}\n          onChange={this.onClose}\n          options={this.state.options}\n          menuIsOpen={true}\n        />\n      );\n    }\n    return (\n      <div>\n        <label>{this.props.schema.title}</label>\n        <p>{this.props.schema.description}</p>\n        {field}\n      </div>\n    );\n  }\n\n  public onOpen = () => {\n    const options = this.loadOptions();\n    this.setState({ open: true, options });\n  };\n\n  public onClose = (event: any) => {\n    const value = event.value;\n    this.setState(\n      {\n        value,\n        open: false,\n        options: []\n      },\n      () => {\n        this.props.onChange(value);\n      }\n    );\n  };\n}\n","import * as React from 'react';\n\nexport function oneOfSplat(schema: any, prop: string, offset: number) {\n    const splat = new Map<string, JSX.Element>();\n    schema.dependencies[prop].oneOf.forEach((d: any) => {\n        Object.keys(d.properties).filter(p => p !== prop).forEach((p: any) => {\n            splat.set(p, <th key={offset + splat.size}>{d.properties[p].title}</th>);\n        });\n    });\n    return splat;\n}\n","import * as React from \"react\";\n\nimport { Table } from \"react-bootstrap\";\nimport { oneOfSplat } from \"./oneOfSplat\";\n\ninterface IProps {\n  data: any;\n  schema: any;\n}\n\nexport const GeneSpectraTable = (props: IProps) => {\n  if (!props.data.BGC_MS2_links) {\n    return <p>No links between gene clusters and MS2 spectra.</p>;\n  }\n  const mySchema = props.schema.properties.BGC_MS2_links.items;\n  const myProps = mySchema.properties;\n  const depKey = \"link\";\n  const bgcKey = \"BGC_ID\";\n  const cols = Object.keys(myProps).filter(v => v !== depKey && v !== bgcKey);\n  let headers: JSX.Element[] = [];\n  cols.forEach((v: any, i: number) => {\n    const prop = myProps[v];\n    if (prop.title) {\n      headers.push(<th key={i}>{prop.title}</th>);\n    } else {\n      headers.push(<th key={i}>{v}</th>);\n    }\n  });\n\n  const bgcSplat = oneOfSplat(\n    mySchema.properties.BGC_ID,\n    \"BGC\",\n    headers.length\n  );\n  const bgcCols = Array.from(bgcSplat.keys());\n  headers = headers.concat(Array.from(bgcSplat.values()));\n\n  const depSplat = oneOfSplat(mySchema, depKey, headers.length);\n  const depCols = Array.from(depSplat.keys());\n  headers = headers.concat(Array.from(depSplat.values()));\n\n  const rows = props.data.BGC_MS2_links.map((r: any, i: number) => {\n    let tds = cols.map((c: any, ci: number) => {\n      if (c === \"verification\") {\n        return <td key={ci}>{r[c].join(\";\")}</td>;\n      }\n      return <td key={ci}>{r[c]}</td>;\n    });\n\n    const bgcTds = bgcCols.map((c: string, ci: number) => {\n      return <td key={tds.length + ci}>{r.BGC_ID[c]}</td>;\n    });\n    tds = tds.concat(bgcTds);\n\n    const depTds = depCols.map((c: string, ci: number) => {\n      return <td key={tds.length + ci}>{r[c]}</td>;\n    });\n    tds = tds.concat(depTds);\n    return <tr key={i}>{tds}</tr>;\n  });\n\n  return (\n    <Table condensed={true} striped={true} bordered={true}>\n      <thead>\n        <tr>\n          <td colSpan={cols.length} />\n          <td colSpan={bgcCols.length}>{myProps[bgcKey].title}</td>\n          <td colSpan={depCols.length}>{myProps[depKey].title}</td>\n        </tr>\n        <tr>{headers}</tr>\n      </thead>\n      <tbody>{rows}</tbody>\n    </Table>\n  );\n};\n","import * as React from \"react\";\n\nimport { IExpander } from \"./AbstractExpander\";\n\nexport class ExtractionExpander implements IExpander {\n  public fk = \"extraction_method_label\";\n  private foreignTable = \"extraction_methods\";\n  private labelField = \"extraction_method\";\n  private schema: any;\n  private lookup: any[];\n\n  constructor(schema: any, data: any) {\n    this.schema =\n      schema.properties.experimental.properties[\n        this.foreignTable\n      ].items.properties;\n    this.lookup = data.experimental[this.foreignTable];\n  }\n\n  public ths(offset: number) {\n    return this.headers().map((s, i) => <th key={i + offset}>{s}</th>);\n  }\n\n  public tds(row: any, offset: number) {\n    const foreignItem = this.find(row);\n    const foreignCols = this.cols(foreignItem);\n    return foreignCols.map((td, tdi) => {\n      return <td key={tdi + offset}>{td}</td>;\n    });\n  }\n\n  public headers() {\n    return Object.keys(this.schema).map(k => this.schema[k].title);\n  }\n\n  public textCols(row: any): string[] {\n    const foreignItem = this.find(row);\n    return this.textColsOf(foreignItem);\n  }\n\n  private textColsOf(row: any) {\n    const solventsKey = \"solvents\";\n    const solventSchema = this.schema[solventsKey].items.properties.solvent;\n    const sep = ';';\n    return Object.keys(this.schema).map(k => {\n      const v = row[k];\n      if (k === solventsKey) {\n        return v.map((s: any, i: number) => {\n          const solventName = solventSchema.anyOf.find(\n            (r: any) => r.enum[0] === s.solvent\n          ).title;\n          if (solventName === \"Other solvent\") {\n            return `${s.Other_solvent}=${s.ratio}`;\n          }\n          return `${solventName}=${s.ratio}`;\n        }).join(sep);\n      }\n      return v;\n    });\n  }\n\n  private cols(row: any) {\n    const solventsKey = \"solvents\";\n    const solventSchema = this.schema[solventsKey].items.properties.solvent;\n    return Object.keys(this.schema).map(k => {\n      const v = row[k];\n      if (k === solventsKey) {\n        return v.map((s: any, i: number) => {\n          const solventName = solventSchema.anyOf.find(\n            (r: any) => r.enum[0] === s.solvent\n          ).title;\n          let sep = \";\";\n          if (v.length - 1 === i) {\n            sep = \"\";\n          }\n          if (solventName === \"Other solvent\") {\n            return (\n              <span key={s.Other_solvent}>\n                {s.Other_solvent}={s.ratio}\n                {sep}\n              </span>\n            );\n          }\n          return (\n            <span key={s.solvent}>\n              <a href={s.solvent}>{solventName}</a>={s.ratio}\n              {sep}\n            </span>\n          );\n        });\n      }\n      return v;\n    });\n  }\n\n  private find(row: any) {\n    const label = row[this.fk];\n    return this.lookup.find((r: any) => r[this.labelField] === label);\n  }\n}\n","import * as React from \"react\";\n\nimport { IExpander } from \"./AbstractExpander\";\n\nexport class GenomeExpander implements IExpander {\n  public fk = \"genome_label\";\n  private foreignTable = \"genomes\";\n  private labelField = \"genome_label\";\n  private schema: any;\n  private lookup: any[];\n\n  constructor(schema: any, data: any) {\n    this.schema = schema.properties[this.foreignTable].items.properties;\n    this.lookup = data[this.foreignTable];\n  }\n\n  public ths(offset: number) {\n    return this.headers().map((s, i) => <th key={i + offset}>{s}</th>);\n  }\n\n  public tds(row: any, offset: number) {\n    const foreignItem = this.find(row);\n    const foreignCols = this.cols(foreignItem);\n    return foreignCols.map((td, tdi) => {\n      return <td key={tdi + offset}>{td}</td>;\n    });\n  }\n\n  public headers() {\n    const nestedProp = \"genome_ID\";\n    const oneOfProp = \"genome_type\";\n    const oneOfs = this.schema[nestedProp].dependencies[oneOfProp].oneOf;\n    const nested: string[] = [];\n    oneOfs.forEach((oneOf: any) => {\n      Object.keys(oneOf.properties).forEach(k => {\n        if (k === oneOfProp) {\n          if (nested.indexOf(this.schema[nestedProp].title) === -1) {\n            nested.push(this.schema[nestedProp].title);\n          }\n        } else if (nested.indexOf(oneOf.properties[k].title) === -1) {\n          nested.push(oneOf.properties[k].title);\n        }\n      });\n    });\n    const lvl1 = Object.keys(this.schema)\n      .filter(k => k !== nestedProp)\n      .map(k => this.schema[k].title);\n    return nested.concat(lvl1);\n  }\n\n  public textCols(row: any): string[] {\n    const foreignItem = this.find(row);\n    return this.cols(foreignItem);\n  }\n\n  private cols(row: any) {\n    const nestedProp = \"genome_ID\";\n    const oneOfProp = \"genome_type\";\n    const oneOfs = this.schema[nestedProp].dependencies[oneOfProp].oneOf;\n    const nested: string[] = [];\n    const nestedValues: string[] = [];\n    oneOfs.forEach((oneOf: any) => {\n      Object.keys(oneOf.properties).forEach(k => {\n        if (k === oneOfProp) {\n          if (nested.indexOf(nestedProp) === -1) {\n            nested.push(nestedProp);\n            nestedValues.push(row[nestedProp][k]);\n          }\n        } else if (nested.indexOf(k) === -1) {\n          nested.push(k);\n          nestedValues.push(row[nestedProp][k]);\n        }\n      });\n    });\n    const lvl1 = Object.keys(this.schema)\n      .filter(k => k !== nestedProp)\n      .map(k => row[k]);\n    return nestedValues.concat(lvl1);\n  }\n\n  private find(row: any) {\n    const label = row[this.fk];\n    return this.lookup.find(\n      (r: any) => r[this.labelField] === label\n    );\n  }\n}\n","import * as React from \"react\";\n\nimport { IExpander } from \"./AbstractExpander\";\n\nexport class InstrumentExpander implements IExpander {\n  public fk = \"instrumentation_method_label\";\n  private foreignTable = \"instrumentation_methods\";\n  private labelField = \"instrumentation_method\";\n  private schema: any;\n  private lookup: any[];\n\n  constructor(schema: any, data: any) {\n    this.schema =\n      schema.properties.experimental.properties[\n        this.foreignTable\n      ].items.properties;\n    this.lookup = data.experimental[this.foreignTable];\n  }\n\n  public ths(offset: number) {\n    return this.headers().map((s, i) => <th key={i + offset}>{s}</th>);\n  }\n\n  public tds(row: any, offset: number) {\n    const foreignItem = this.find(row);\n    const foreignCols = this.htmlCols(foreignItem);\n    return foreignCols.map((td, tdi) => {\n      return <td key={tdi + offset}>{td}</td>;\n    });\n  }\n\n  public textCols(row: any) {\n    const foreignItem = this.find(row);\n    return this.textColsOf(foreignItem);\n  }\n\n  public headers() {\n    return Object.keys(this.schema).map(k => this.schema[k].title);\n  }\n\n  private htmlCols(row: any) {\n    const typeKey = \"instrumentation\";\n    const typeSchema = this.schema[typeKey];\n    const modeKey = \"mode\";\n    const modeSchema = this.schema[modeKey];\n    return Object.keys(this.schema).map(k => {\n      const v = row[k];\n      if (k === typeKey) {\n        const typeLabel = typeSchema.properties.instrument.anyOf.find(\n          (r: any) => r.enum[0] === v.instrument\n        ).title;\n        if (typeLabel === \"Other Mass Spectrometer\") {\n          return (\n            <span key={row.instrumentation.other_instrument}>\n              {row.instrumentation.other_instrument}\n            </span>\n          );\n        }\n        return (\n          <a key={v.instrument} href={v.instrument}>\n            {typeLabel}\n          </a>\n        );\n      } else if (k === modeKey) {\n        const modeLabel = modeSchema.anyOf.find((r: any) => r.enum[0] === v)\n          .title;\n        return (\n          <a key={v} href={v}>\n            {modeLabel}\n          </a>\n        );\n      }\n      return v;\n    });\n  }\n\n  private textColsOf(row: any) {\n    const typeKey = \"instrumentation\";\n    const typeSchema = this.schema[typeKey];\n    const modeKey = \"mode\";\n    const modeSchema = this.schema[modeKey];\n    return Object.keys(this.schema).map(k => {\n      const v = row[k];\n      if (k === typeKey) {\n        const typeLabel = typeSchema.properties.instrument.anyOf.find(\n          (r: any) => r.enum[0] === v.instrument\n        ).title;\n        if (typeLabel === \"Other Mass Spectrometer\") {\n          return row.instrumentation.other_instrument;\n        }\n        return typeLabel;\n      } else if (k === modeKey) {\n        const modeLabel = modeSchema.anyOf.find((r: any) => r.enum[0] === v)\n          .title;\n        return modeLabel;\n      }\n      return v;\n    });\n  }\n\n  private find(row: any) {\n    const label = row[this.fk];\n    return this.lookup.find((r: any) => r[this.labelField] === label);\n  }\n}\n","import * as React from \"react\";\n\nimport { IExpander } from \"./AbstractExpander\";\n\nexport class SampleGrowthConditionsExpander implements IExpander {\n  public fk = \"sample_preparation_label\";\n  private foreignTable = \"sample_preparation\";\n  private labelField = \"sample_preparation_method\";\n  private schema: any;\n  private lookup: any[];\n\n  constructor(schema: any, data: any) {\n    this.schema =\n      schema.properties.experimental.properties[\n        this.foreignTable\n      ].items.properties;\n    this.lookup = data.experimental[this.foreignTable];\n  }\n\n  public ths(offset: number) {\n    return this.headers().map((s, i) => <th key={i + offset}>{s}</th>);\n  }\n\n  public tds(row: any, offset: number) {\n    const foreignItem = this.find(row);\n    const foreignCols = this.htmlCols(foreignItem);\n    return foreignCols.map((td, tdi) => {\n      return <td key={tdi + offset}>{td}</td>;\n    });\n  }\n\n  public headers() {\n    const mediumKey = \"medium_details\";\n    const mediumCols = [\n      this.schema[mediumKey].properties.medium_type.title,\n      this.schema[mediumKey].properties.medium.title\n    ];\n    const cols = Object.keys(this.schema).filter(k => k !== mediumKey).map(k => this.schema[k].title);\n    return mediumCols.concat(cols);\n  }\n\n  public textCols(row: any) {\n    const foreignItem = this.find(row);\n    return this.textColsOf(foreignItem);\n  }\n\n  private textColsOf(row: any) {\n    const mediumKey = \"medium_details\";\n    const mediumSchema = this.schema[mediumKey].properties.medium;\n    const envKey = \"metagenome_details\";\n    const envSchema = this.schema[envKey].properties.environment;\n    const mediumTypeCol = row[mediumKey].medium_type;\n    const cols = Object.keys(this.schema).map(k => {\n      const v = row[k];\n      if (k === mediumKey) {\n        const mediumLabel = mediumSchema.anyOf.find(\n          (r: any) => r.enum[0] === v.medium\n        ).title;\n        if (v.medium === \"other\") {\n          return v.Other_medium;\n        } else {\n          return mediumLabel;\n        }\n      } else if (k === envKey) {\n        if (!v.environment) {\n          return undefined;\n        }\n        const envLabel = envSchema.anyOf.find(\n          (r: any) => r.enum[0] === v.environment\n        ).title;\n        if (v.environment === \"other\") {\n          return v.Other_environment;\n        } else {\n          return envLabel;\n        }\n      }\n      return v;\n    });\n    cols.unshift(mediumTypeCol);\n    return cols;\n  }\n\n  private htmlCols(row: any) {\n    const mediumKey = \"medium_details\";\n    const mediumSchema = this.schema[mediumKey].properties.medium;\n    const envKey = \"metagenome_details\";\n    const envSchema = this.schema[envKey].properties.environment;\n    const mediumTypeCol = row[mediumKey].medium_type;\n    const cols = Object.keys(this.schema).map(k => {\n      const v = row[k];\n      if (k === mediumKey) {\n        const mediumLabel = mediumSchema.anyOf.find(\n          (r: any) => r.enum[0] === v.medium\n        ).title;\n        if (v.medium === \"other\") {\n          return (\n            <span>\n              {v.Other_medium}\n            </span>\n          );\n        } else {\n          return (\n            <a key={v.medium} href={v.medium}>\n              {mediumLabel}\n            </a>\n          );\n        }\n      } else if (k === envKey) {\n        if (!v.environment) {\n          return undefined;\n        }\n        const envLabel = envSchema.anyOf.find(\n          (r: any) => r.enum[0] === v.environment\n        ).title;\n        if (v.environment === \"other\") {\n          return v.Other_environment;\n        } else {\n          return (\n            <a key={v} href={v}>\n              {envLabel}\n            </a>\n          );\n        }\n      }\n      return v;\n    });\n    cols.unshift(mediumTypeCol);\n    return cols;\n  }\n\n  private find(row: any) {\n    const label = row[this.fk];\n    return this.lookup.find((r: any) => r[this.labelField] === label);\n  }\n}\n","import { IExpander } from './expanders/AbstractExpander';\nimport { ExtractionExpander } from './expanders/ExtractionExpander';\nimport { GenomeExpander } from './expanders/GenomeExpander';\nimport { InstrumentExpander } from './expanders/InstrumentExpander';\nimport { SampleGrowthConditionsExpander } from './expanders/SampleGrowthConditionsExpander';\n\nexport function textTable(schema: any, data: any): string[][] {\n    const expanders: IExpander[] = [\n        new GenomeExpander(schema, data),\n        new SampleGrowthConditionsExpander(schema, data),\n        new ExtractionExpander(schema, data),\n        new InstrumentExpander(schema, data),\n    ];\n    const gmProps = schema.properties.genome_metabolome_links.items.properties;\n    const foreignKeys = new Set(expanders.map(e => e.fk));\n    const cols = Object.keys(gmProps).filter(k => !foreignKeys.has(k));\n    const headers: string[] = cols.map((s) => {\n        const field = gmProps[s];\n        return field.title;\n    });\n    expanders.forEach(e => e.headers().forEach(h => headers.push(h)));\n    const gmRows = data.genome_metabolome_links;\n    const rows: string[][] = gmRows.map((row: any, i: number) => {\n        const textRow = cols.map((td, tdi) => {\n            return row[td];\n        });\n        expanders.forEach(e => e.textCols(row).forEach(c => textRow.push(c)));\n        return textRow;\n    });\n    return [headers, ...rows];\n}\n\nfunction tsvExport(schema: any, data: any) {\n    const newline = '\\n';\n    const sep = '\\t';\n    return textTable(schema, data).map(r => r.join(sep)).join(newline);\n}\n\nexport function tsvUrl(schema: any, data: any) {\n    const mimeType = 'text/tab-separated-values';\n    const bj = btoa(tsvExport(schema, data));\n    return `data:${mimeType};base64,${bj}`;\n}\n\nfunction label2value(label: string, oneOf: any[]) {\n    const hit = oneOf.find(e => e.title === label);\n    if (hit) {\n        return hit.enum[0];\n    }\n    return hit;\n}\n\nfunction collapseSamplePreparation(row: any, schema: any) {\n     const sample: any = {\n        sample_preparation_method: row['Sample Growth Conditions Label'],\n        medium_details: {}\n    }\n    const type = row['Medium type'];\n    if (type) {\n        sample.medium_details.medium_type = type;\n    }\n     const mediumLabel = row['Growth medium'];\n    if (mediumLabel) {\n        const mediumValue = label2value(mediumLabel, schema.properties.experimental.properties.sample_preparation.items.properties.medium_details.properties.medium.anyOf);\n        if (mediumValue) {\n            sample.medium_details.medium = mediumValue;\n        } else {\n            sample.medium_details.Other_medium = mediumLabel;\n        }\n    }\n    const temp = row['Growth temperature'];\n    if (temp) {\n        sample.growth_temperature = temp*1;\n    }\n    const aeration = row.Aeration;\n    if (aeration) {\n        sample.aeration = aeration;\n    }\n    const growingTime = row['Growth time'];\n    if (growingTime) {\n        sample.growing_time = growingTime*1;\n    }\n    const phase = row['Growth phase or OD'];\n    if (phase) {\n        sample.growth_phase_OD = phase;\n    }\n    const cond = row['Other growth conditions'];\n    if (cond) {\n        sample.other_growth_conditions = cond;\n    }\n    const metagenomeLabel = row['Metagenome details'];\n    const metagenomeValue = label2value(metagenomeLabel, schema.properties.experimental.properties.sample_preparation.items.properties.metagenome_details.properties.environment.anyOf);\n    if (metagenomeValue) {\n        sample.metagenome_details = {environment: metagenomeValue};\n    } else {\n        sample.metagenome_details = {Other_environment: metagenomeLabel};\n    }\n    const metadesc = row['Metagenomic sample description'];\n    if (metadesc) {\n        sample.metagenomic_sample_description = metadesc;\n    }\n    return sample;\n}\n\nfunction collapseExtractionMethod(row: any, schema: any) {\n    const extract: any = {\n        extraction_method: row['Extraction Method Label'],\n        solvents: []\n    };\n    const solventsString: string = row['Extraction solvent'];\n    solventsString.split(';').forEach(solventString => {\n        const [solventLabel, ratio] = solventString.split('=');\n        const solventValue = label2value(solventLabel, schema.properties.experimental.properties.extraction_methods.items.properties.solvents.items.properties.solvent.anyOf);\n        if (solventValue) {\n            extract.solvents.push({\n                solvent: solventValue, \n                ratio: parseFloat(ratio)\n            });\n        } else {\n            extract.solvents.push({\n                Other_solvent: solventLabel, \n                ratio: parseFloat(ratio)\n            });\n        }\n    });\n    const other = row['Other extraction details'];\n    if (other) {\n        extract.other_extraction_parameters = other;\n    }\n    return extract;\n}\n\nfunction collapseInstrumentationMethod(row: any, schema: any) {\n    const instr: any = {\n        instrumentation_method: row['Instrumentation Method Label']\n    };\n    const instrTypeLabel = row.Instrumentation;\n    const instrTypeValue = label2value(instrTypeLabel, schema.properties.experimental.properties.instrumentation_methods.items.properties.instrumentation.properties.instrument.anyOf);\n    if (instrTypeValue) {\n        instr.instrumentation = {instrument: instrTypeValue}\n    } else {\n        instr.instrumentation = {other_instrument: instrTypeLabel}\n    }\n    const column = row['Column details'];\n    if (column) {\n        instr.column = column;\n    }\n    const mode = row['Instrument mode'];\n    if (mode) {\n        instr.mode = label2value(mode, schema.properties.experimental.properties.instrumentation_methods.items.properties.mode.anyOf);\n    }\n    const range = row['Mass range'];\n    if (range) {\n        instr.range = range;\n    }\n    const coll = row['Collision energy'];\n    if (coll) {\n        instr.collision_energy = coll;\n    }\n    const buf = row.Buffering;\n    if (buf) {\n        instr.buffering = buf;\n    }\n    const other = row['Other instrumentation information'];\n    if (other) {\n        instr.other_instrumentation = other;\n    }\n    return instr;\n}\n\nfunction collapseGenome(row: any) {\n    const genome: any = {\n        genome_ID: {\n            genome_type: row['Genome or Metagenome']\n        },\n        genome_label: row['Genome Label']\n    };\n    const genbankAccession = row['GenBank accession number'];\n    if (genbankAccession) {\n        genome.genome_ID.GenBank_accession = genbankAccession;\n    }\n    const refseqAccession = row['RefSeq accession number'];\n    if (refseqAccession) {\n        genome.genome_ID.RefSeq_accession = refseqAccession;\n    }\n    const ena = row['ENA/NCBI accession number'];\n    if (ena) {\n        genome.genome_ID.ENA_NCBI_accession = ena;\n    }\n    const mgnify = row['MGnify accession number'];\n    if (mgnify) {\n        genome.genome_ID.MGnify_accession = mgnify;\n    }\n    const biosample = row['BioSample accession number'];\n    if (biosample) {\n        genome.BioSample_accession = biosample;\n    }\n    const pubs = row['Key publications'];\n    if (pubs) {\n        genome.publications = pubs;\n    }\n    return genome;\n}\n\nexport function jsonDocument(schema: any, rows: any) {\n    const genomes: any[] = [];\n    const genomeLabels = new Set();\n    const samplePreparations: any[] = [];\n    const samplePreparationLabels = new Set();\n    const extractionMethods: any[] = [];\n    const extractionMethodLabels = new Set();\n    const instrumentationMethods: any[] = [];\n    const instrumentationMethodLabels = new Set();\n    const gmRows: any[] = rows.map((row: any) => {\n        const metabolomicsFile = row['Location of metabolomics data file'];\n        const genomeLabel = row['Genome Label'];\n        if (!genomeLabels.has(genomeLabel)) {\n            genomes.push(collapseGenome(row));\n            genomeLabels.add(genomeLabel);\n        }\n        const samplePreparationLabel = row['Sample Growth Conditions Label'];\n        if (!samplePreparationLabels.has(samplePreparationLabel)) {\n            samplePreparations.push(collapseSamplePreparation(row, schema));\n            samplePreparationLabels.add(samplePreparationLabel);\n        }\n        const extractionMethodLabel = row['Extraction Method Label'];\n        if (!extractionMethodLabels.has(extractionMethodLabel)) {\n            extractionMethods.push(collapseExtractionMethod(row, schema));\n            extractionMethodLabels.add(extractionMethodLabel);\n        }\n        const instrumentationMethodLabel = row['Instrumentation Method Label'];\n        if (!instrumentationMethodLabels.has(instrumentationMethodLabel)) {\n            instrumentationMethods.push(collapseInstrumentationMethod(row, schema));\n            instrumentationMethodLabels.add(instrumentationMethodLabel);\n        }\n        return {\n            genome_label: genomeLabel,\n            metabolomics_file: metabolomicsFile,\n            sample_preparation_label: samplePreparationLabel,\n            extraction_method_label: extractionMethodLabel,\n            instrumentation_method_label: instrumentationMethodLabel\n        };\n    });\n    return {\n        version: \"1\",\n        personal: {},\n        metabolomics: {},\n        genomes,\n        experimental: {\n            sample_preparation: samplePreparations,\n            extraction_methods: extractionMethods,\n            instrumentation_methods: instrumentationMethods\n        },\n        genome_metabolome_links: gmRows\n    }\n}","import * as React from \"react\";\n\nimport { Table, Button, Glyphicon } from 'react-bootstrap';\n\nimport { ExtractionExpander } from './expanders/ExtractionExpander';\nimport { GenomeExpander } from './expanders/GenomeExpander';\nimport { InstrumentExpander } from './expanders/InstrumentExpander';\nimport { SampleGrowthConditionsExpander } from './expanders/SampleGrowthConditionsExpander';\nimport { tsvUrl } from './textTable';\n\ninterface IProps {\n    data: any;\n    schema: any;\n}\n\nexport const GenomeMetabolomicsTable = (props: IProps) => {\n    if (!props.data.genome_metabolome_links || props.data.genome_metabolome_links.length === 0) {\n        return <p>No links between (meta)genomes and metabolimics data files.</p>;\n    }\n    const genomeExpander = new GenomeExpander(props.schema, props.data);\n    const sampleExpander = new SampleGrowthConditionsExpander(props.schema, props.data);\n    const extractionExpander = new ExtractionExpander(props.schema, props.data);\n    const instrumentExpander = new InstrumentExpander(props.schema, props.data);\n    const gmProps = props.schema.properties.genome_metabolome_links.items.properties;\n    const foreignKeys = new Set([\n        genomeExpander.fk,\n        sampleExpander.fk,\n        extractionExpander.fk,\n        instrumentExpander.fk,\n    ]);\n    const cols = Object.keys(gmProps).filter(k => !foreignKeys.has(k));\n\n    let headers = cols.map((s) => {\n        const field = gmProps[s];\n        return <th key={s}>{field.title}</th>;\n    });\n    const genomeHeaders = genomeExpander.ths(headers.length);\n    headers = headers.concat(genomeHeaders);\n    const sampleHeaders = sampleExpander.ths(headers.length);\n    headers = headers.concat(sampleHeaders);\n    const extractionHeaders = extractionExpander.ths(headers.length);\n    headers = headers.concat(extractionHeaders);\n    const instrumentHeaders = instrumentExpander.ths(headers.length);\n    headers = headers.concat(instrumentHeaders);\n\n    const gmRows = props.data.genome_metabolome_links;\n    let rows = gmRows.map((row: any, i: number) => {\n        let tds = cols.map((td, tdi) => {\n            if (td === 'Metabolomics_Data_File') {\n                return (<td key={tdi}><a href={row[td]}>{row[td]}</a></td>);\n            }\n            return (<td key={tdi}>{row[td]}</td>);\n        });\n\n        const genomeTds = genomeExpander.tds(row, tds.length);\n        tds = tds.concat(genomeTds);\n        const sampleTds = sampleExpander.tds(row, tds.length);\n        tds = tds.concat(sampleTds);\n        const extractionTds = extractionExpander.tds(row, tds.length);\n        tds = tds.concat(extractionTds);\n        const instrumentTds = instrumentExpander.tds(row, tds.length);\n        tds = tds.concat(instrumentTds);\n        return (\n            <tr key={i}>\n                {tds}\n            </tr>\n        );\n    });\n    const genomemetabolometsvfn = 'paired-' + props.data.metabolomics.GNPSMassIVE_ID + '-genome-metabolome.tsv';\n\n    const [isCollapsed, changeCollapsing] = React.useState(true);\n    const columnIndexesToShowCollapsed = [0, 8, 18, 21, 29];\n    if (isCollapsed) {\n        // remove all columns not in columnIndexesToShowFolded\n        genomeHeaders.splice(0, genomeHeaders.length - 1);\n        sampleHeaders.splice(0, sampleHeaders.length - 1);\n        extractionHeaders.splice(0, extractionHeaders.length - 1);\n        instrumentHeaders.splice(0, instrumentHeaders.length - 1);\n        headers = columnIndexesToShowCollapsed.map(c => headers[c]);\n        rows = rows.map((r: any, i: number) => {\n            return <tr key={i}>\n                {columnIndexesToShowCollapsed.map(c => r.props.children[c])}\n            </tr>;\n        });\n    }\n    return (\n        <div>\n            <Table condensed={true} striped={true} bordered={true}>\n                <thead>\n                    <tr>\n                        <th colSpan={cols.length}>\n                            <Button bsSize=\"xs\" onClick={() => changeCollapsing(!isCollapsed)} title={isCollapsed ? 'Expand table, show all columns' : 'Collapse table, only show label columns'}>\n                                <Glyphicon glyph={isCollapsed ? 'plus' : 'minus'} /> {isCollapsed ? 'Expand' : 'Collapse'}\n                            </Button>\n                        </th>\n                        <th colSpan={genomeHeaders.length}>{gmProps[genomeExpander.fk].title}</th>\n                        <th colSpan={sampleHeaders.length}>{gmProps[sampleExpander.fk].title}</th>\n                        <th colSpan={extractionHeaders.length}>{gmProps[extractionExpander.fk].title}</th>\n                        <th colSpan={instrumentHeaders.length}>{gmProps[instrumentExpander.fk].title}</th>\n                    </tr>\n                    <tr>\n                        {headers}\n                    </tr>\n                </thead>\n                <tbody>\n                    {rows}\n                </tbody>\n            </Table>\n            <a href={tsvUrl(props.schema, props.data)} download={genomemetabolometsvfn}>tab delimited downoad</a>\n        </div>\n    );\n}","import * as React from \"react\";\n\nimport { Button, Glyphicon } from \"react-bootstrap\";\n\nimport { GeneSpectraTable } from \"./GeneSpectraTable\";\nimport { GenomeMetabolomicsTable } from \"./GenomeMetabolomicsTable\";\n\ninterface IProps {\n  data: any;\n  schema: any;\n}\n\nfunction record2dataUrl(data: object, mimeType = \"application/json\") {\n  const bj = btoa(JSON.stringify(data, null, 4));\n  return `data:${mimeType};base64,${bj}`;\n}\n\nexport const PairedDataRecord = (props: IProps) => {\n    const dataUrl = record2dataUrl(props.data);\n    const submitterProps = props.schema.properties.personal.properties;\n    const submitter = Object.keys(submitterProps).map((s: string) => {\n        const field = submitterProps[s];\n        return <li key={s}>{field.title}: {props.data.personal[s]}</li>;\n    });\n\n    const metabolomeProps = props.schema.properties.metabolomics.properties;\n    const metabolome = Object.keys(metabolomeProps).map((s: string) => {\n        const field = metabolomeProps[s];\n        return <li key={s}>{field.title}: {props.data.metabolomics[s]}</li>;\n    });\n\n    const GNPSMassIVE_ID = props.data.metabolomics.GNPSMassIVE_ID;\n    const filename = `paired_datarecord_${GNPSMassIVE_ID}.json`;\n    return (\n        <div>\n            <h3>iOMEGA Paired data record:</h3>\n            <Button href={dataUrl} download={filename}><Glyphicon glyph=\"download\" /> Download</Button>\n            <h2>Submitter Information</h2>\n            <ul>\n                {submitter}\n            </ul>\n            <h2>Metabolomics project details</h2>\n            <ul>\n                {metabolome}\n            </ul>\n\n            <h2>Links between genomes and metabolomics data</h2>\n            <GenomeMetabolomicsTable data={props.data} schema={props.schema} />\n\n            <h2>Linked gene clusters and MS2 spectra</h2>\n            <GeneSpectraTable data={props.data} schema={props.schema} />\n        </div>\n    );\n};\n","export function injectForeignKeySearchMethods(uiSchema: any, app: any) {\n  uiSchema.genome_metabolome_links.items.genome_label.foreignKey.search = foreignKeySearch(app, \"genome_label\", genomeLabels);\n  uiSchema.genome_metabolome_links.items.sample_preparation_label.foreignKey.search = foreignKeySearch(app, \"sample_preparation_label\", sampleLabels);\n  uiSchema.genome_metabolome_links.items.extraction_method_label.foreignKey.search = foreignKeySearch(app, \"extraction_method_label\", extractionLabels);\n  uiSchema.genome_metabolome_links.items.instrumentation_method_label.foreignKey.search = foreignKeySearch(app, \"instrumentation_method_label\", instrumentLabels);\n  uiSchema.BGC_MS2_links.items.MS2_URL.foreignKey.search = foreignKeySearch(app, \"MS2_URL\", ms2Labels);\n}\n\nexport function foreignKeySearch(app: any, requiredProp: String, labelSearcher: (doc: any) => string[]) {\n  return (prop: string) => {\n    const form = app.formRef.current;\n    if (!form) {\n      return [];\n    }\n    const doc = (form.state as any).formData;\n    if (!doc) {\n      return [];\n    }\n    if (prop === requiredProp) {\n      return labelSearcher(doc);\n    }\n    throw new Error('Invalid property name: ' + prop);\n  };\n}\n\nfunction genomeLabels(doc: any) {\n  if (!doc.genomes) {\n    return [];\n  }\n  return doc.genomes.map(\n    (r: any) =>\n      r.genome_label\n  );\n}\n\nfunction sampleLabels(doc: any) {\n  if (\n    !doc.experimental.sample_preparation\n  ) {\n    return [];\n  }\n  return doc.experimental.sample_preparation.map(\n    (r: any) => r.sample_preparation_method\n  );\n}\n\nfunction extractionLabels(doc: any) {\n  if (\n    !doc.experimental.extraction_methods\n  ) {\n    return [];\n  }\n  return doc.experimental.extraction_methods.map((r: any) => r.extraction_method);\n}\n\nfunction instrumentLabels(doc: any) {\n  if (\n    doc.experimental.instrumentation_methods === undefined\n  ) {\n    return [];\n  }\n  return doc.experimental.instrumentation_methods.map((r: any) => r.instrumentation_method);\n}\n\nfunction ms2Labels(doc: any) {\n  if (!doc.genome_metabolome_links) {\n    return [];\n  }\n  return doc.genome_metabolome_links.map((r: any) => r.metabolomics_file);\n}\n\nfunction findDuplicates(labels: string[]) {\n  function isNotNull(d: (number | null)): d is number {\n    return d !== null;\n  }\n\n  return labels.map((value, index) => {\n    if (labels.indexOf(value) !== index) {\n      return index;\n    } else {\n      return null\n    }\n  }).filter(isNotNull);\n}\n\nexport function validateDocument(doc: any, errors: any) {\n  if (doc.experimental.extraction_methods) {\n    doc.experimental.extraction_methods.forEach((e: any, i: number) => {\n      const ratioTotal = e.solvents.reduce((c: number, s: any) => {\n        return s.ratio + c;\n      }, 0);\n      if (ratioTotal > 1) {\n        errors.experimental.extraction_methods[i].solvents.addError(\n          'Combined ratio not within 0 and 1'\n        );\n      }\n    });\n  }\n  const gmIds = genomeLabels(doc);\n  findDuplicates(gmIds).forEach(d => {\n    errors.genomes[d].genome_label.addError('Non-unique label');\n  });\n  const spIds = sampleLabels(doc);\n  findDuplicates(spIds).forEach(d => {\n    errors.experimental.sample_preparation[d].sample_preparation_method.addError('Non-unique label');\n  });\n  const emIds = extractionLabels(doc);\n  findDuplicates(emIds).forEach(d => {\n    errors.experimental.extraction_methods[d].extraction_method.addError('Non-unique label');\n  });\n  const imIds = instrumentLabels(doc);\n  findDuplicates(imIds).forEach(d => {\n    errors.experimental.instrumentation_methods[d].instrumentation_method.addError('Non-unique label');\n  });\n  if (doc.genome_metabolome_links) {\n    doc.genome_metabolome_links.forEach(\n      (genomeMetabolomeLink: any, i: number) => {\n        if (\n          genomeMetabolomeLink.genome_label &&\n          !gmIds.includes(genomeMetabolomeLink.genome_label)\n        ) {\n          errors.genome_metabolome_links[i].genome_label.addError(\n            \"Invalid selection\"\n          );\n        }\n        if (\n          genomeMetabolomeLink.sample_preparation_label &&\n          !spIds.includes(genomeMetabolomeLink.sample_preparation_label)\n        ) {\n          errors.genome_metabolome_links[i].sample_preparation_label.addError(\n            \"Invalid selection\"\n          );\n        }\n        if (\n          genomeMetabolomeLink.extraction_method_label &&\n          !emIds.includes(genomeMetabolomeLink.extraction_method_label)\n        ) {\n          errors.genome_metabolome_links[i].extraction_method_label.addError(\n            \"Invalid selection\"\n          );\n        }\n        if (\n          genomeMetabolomeLink.instrumentation_method_label &&\n          !imIds.includes(genomeMetabolomeLink.instrumentation_method_label)\n        ) {\n          errors.genome_metabolome_links[\n            i\n          ].instrumentation_method_label.addError(\"Invalid selection\");\n        }\n      }\n    );\n  }\n  if (doc.BGC_MS2_links) {\n    const msUrls = ms2Labels(doc);\n    findDuplicates(msUrls).forEach(d => {\n      errors.genome_metabolome_links[d].metabolomics_file.addError('Non-unique label');\n    });\n    doc.BGC_MS2_links.forEach((geneSpectraLink: any, i: number) => {\n      if (geneSpectraLink.MS2_URL && !msUrls.includes(geneSpectraLink.MS2_URL)) {\n        errors.BGC_MS2_links[i].MS2_URL.addError(\"Invalid selection\");\n      }\n    });\n  }\n  return errors;\n};\n","import * as React from \"react\";\n\nimport { JSONSchema6 } from \"json-schema\";\nimport { Button, ButtonGroup, ButtonToolbar, Glyphicon } from \"react-bootstrap\";\nimport Form, { ISubmitEvent } from \"react-jsonschema-form\";\nimport CollapsibleField from \"react-jsonschema-form-extras/lib/CollapsibleField\";\n\nimport { ForeignKeyField } from \"./ForeignKeyField\";\nimport { GenomeMetabolomeLinksField } from './GenomeMetabolomeLinksField';\nimport { PairedDataRecord } from \"./PairedDataRecord\";\n\nimport \"./App.css\";\nimport { jsonDocument } from './textTable';\nimport { injectForeignKeySearchMethods, validateDocument } from \"./validate\";\n\nexport interface IState {\n  schema: JSONSchema6;\n  uiSchema: any;\n  initDoc: any;\n  validDoc: any;\n}\n\nconst formFields = {\n  collapsible: CollapsibleField,\n  foreignKey: ForeignKeyField,\n  gmarray: GenomeMetabolomeLinksField,\n};\n\nexport class App extends React.Component<{}, IState> {\n  public state: IState = { schema: {}, uiSchema: {}, initDoc: {}, validDoc: undefined };\n  private uploadRef: React.RefObject<HTMLInputElement>;\n  private formRef: React.RefObject<Form<any>>;\n\n  constructor(props: {}) {\n    super(props);\n    this.uploadRef = React.createRef();\n    this.formRef = React.createRef();\n  }\n\n  public componentDidMount() {\n    fetch(\"schema.json\")\n      .then(r => r.json())\n      .then(schema => {\n        // react-jsonschema-form does not like $schema key in the schema, it stops validating\n        delete schema['$schema'];\n        return schema;\n      })\n      .then(schema => this.setState({ schema }));\n    fetch(\"uischema.json\")\n      .then(r => r.json())\n      .then(uiSchema => {\n        injectForeignKeySearchMethods(uiSchema, this);\n        this.setState({ uiSchema });\n      });\n  }\n  \n  public onSubmit = ({ formData }: ISubmitEvent<object>) => {\n    this.setState({ validDoc: formData, initDoc: formData });\n  };\n\n  public onReset = () => {\n    this.setState({ initDoc: {}, validDoc: undefined });\n  }\n\n  public onError = () => {\n    if (this.state.validDoc !== undefined) {\n      // Hide PairedDataRecord when form is invalid\n      this.setState({ validDoc: undefined });\n    }\n  }\n\n  public uploadGenomeMetabolomeLinks = (rows: any[]) => {\n    const doc = jsonDocument(this.state.schema, rows);\n    const formData: any = this.state.initDoc;\n    formData.genomes = doc.genomes;\n    formData.experimental = doc.experimental;\n    formData.genome_metabolome_links = doc.genome_metabolome_links;\n    if (!formData.personal) {\n      formData.personal = {\n        PI_email: undefined,\n        PI_institution: undefined,\n        PI_name: undefined,\n        submitter_email: undefined,\n        submitter_institution: undefined,\n        submitter_name: undefined,\n      };\n    }\n    if (!formData.metabolomics) {\n      formData.metabolomics = {\n        GNPSMassIVE_ID: undefined,\n        MaSSIVE_URL: undefined\n      }\n    }\n    this.fillForm(formData);\n  }\n\n  public render() {\n    const formContext = {\n      uploadGenomeMetabolomeLinks: this.uploadGenomeMetabolomeLinks\n    };\n    return (\n      <div className=\"App\">\n        {Object.keys(this.state.schema).length > 0 &&\n          Object.keys(this.state.uiSchema).length > 0 && (\n            <Form\n              schema={this.state.schema}\n              uiSchema={this.state.uiSchema}\n              fields={formFields}\n              formData={this.state.initDoc}\n              onSubmit={this.onSubmit}\n              onError={this.onError}\n              validate={validateDocument}\n              formContext={formContext}\n              ref={this.formRef}\n            >\n              <ButtonToolbar>\n                <ButtonGroup>\n                  <Button onClick={this.loadExample1} title=\"Load example dataset\">\n                    <Glyphicon glyph=\"paperclip\" /> Example\n                  </Button>\n                  <Button onClick={this.onUpload} title=\"Upload JSON file\">\n                    <Glyphicon glyph=\"upload\" /> Upload\n                    <input\n                      type=\"file\"\n                      accept=\"application/json,.json\"\n                      onChange={this.fillFormFromFile}\n                      ref={this.uploadRef}\n                      style={{ display: \"none\" }}\n                    />\n                  </Button>\n                </ButtonGroup>\n                <ButtonGroup>\n                  <Button type=\"submit\" bsStyle=\"primary\">\n                    <Glyphicon glyph=\"ok\" /> Save\n                  </Button>\n                  <Button type=\"reset\" onClick={this.onReset}>\n                    <Glyphicon glyph=\"remove\" /> Reset\n                  </Button>\n                </ButtonGroup>\n              </ButtonToolbar>\n            </Form>\n          )}\n        {this.state.validDoc && (\n          <PairedDataRecord\n            data={this.state.validDoc}\n            schema={this.state.schema}\n          />\n        )}\n      </div>\n    );\n  }\n \n  public onUpload = () => {\n    if (this.uploadRef.current) {\n      this.uploadRef.current.click();\n    }\n  };\n\n  public fillFormFromFile = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (!event.target.files) {\n      return;\n    }\n    const file = event.target.files[0];\n    const reader = new FileReader();\n    reader.onload = evt => {\n      if (reader.result) {\n        const formData = JSON.parse(reader.result as string);\n        this.fillForm(formData);\n      }\n    };\n    reader.readAsText(file);\n  };\n\n\n  public loadExample1 = () => {\n    fetch('examples/paired_datarecord_MSV000078839_example.json')\n      .then(r => r.json())\n      .then(this.fillForm);\n  }\n\n  public fillForm = (doc: any) => {\n    this.setState({ initDoc: doc, validDoc: undefined }, () => {\n      const form = this.formRef.current;\n      if (form) {\n        // dts for form does not include submit(), but is documented at\n        // https://react-jsonschema-form.readthedocs.io/en/latest/#submit-form-programmatically\n        (form as any).submit();\n      }\n    });\n  }\n}\n","import * as React from \"react\";\n\nimport { tsvParse } from 'd3-dsv';\nimport { Button, Glyphicon } from 'react-bootstrap';\nimport { FieldProps } from 'react-jsonschema-form';\nimport ArrayField from 'react-jsonschema-form/lib/components/fields/ArrayField';\n\nexport const GenomeMetabolomeLinksField = (props: FieldProps) => {\n    const uploadRef = React.useRef<HTMLInputElement>(null);\n\n    function onClick() {\n        if (uploadRef.current) {\n            uploadRef.current.click();\n        }\n    }\n\n    function fillLinksFromFile(event: React.ChangeEvent<HTMLInputElement>) {\n        if (!event.target.files) {\n            return;\n          }\n          const file = event.target.files[0];\n          const reader = new FileReader();\n          reader.onload = () => {\n            if (reader.result) {\n              const rows = tsvParse(reader.result as string);\n              props.formContext.uploadGenomeMetabolomeLinks(rows);\n            }\n          };\n          reader.readAsText(file);\n    }\n\n    return (\n        <div>\n            <ArrayField {...props}/>\n            <Button onClick={onClick} title=\"Upload links from tab delimited file, will replace existing links, (meta)genomes and metabolomics experimental details\">\n                <Glyphicon glyph=\"upload\"/> Upload links\n                <input\n                    type=\"file\"\n                    accept=\"text/tab-separated-values,.tsv,.txt\"\n                    onChange={fillLinksFromFile}\n                    ref={uploadRef}\n                    style={{ display: \"none\" }}\n                />\n            </Button>\n        </div>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/css/bootstrap-theme.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}