{"version":3,"sources":["ForeignKeyField.tsx","oneOfSplat.tsx","GeneSpectraTable.tsx","expanders/ExtractionExpander.tsx","expanders/GenomeExpander.tsx","expanders/InstrumentExpander.tsx","expanders/SampleGrowthConditionsExpander.tsx","textTable.ts","GenomeMetabolomicsTable.tsx","PairedDataRecord.tsx","App.tsx","GenomeMetabolomeLinksField.tsx","serviceWorker.ts","index.tsx"],"names":["ForeignKeyField","_React$Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","open","options","handleChange","option","props","onChange","value","loadOptions","uiSchema","foreignKey","search","name","map","v","label","onOpen","setState","onClose","event","inherits","createClass","key","field","react","className","onClick","formData","Glyphicon","glyph","react_select_esm","defaultValue","menuIsOpen","schema","title","description","React","oneOfSplat","prop","offset","splat","Map","dependencies","oneOf","forEach","d","keys","properties","filter","p","set","size","GeneSpectraTable","data","BGC_MS2_links","mySchema","items","myProps","cols","headers","i","push","bgcSplat","BGC_ID","bgcCols","from","depSplat","values","depCols","rows","r","tds","c","ci","join","bgcTds","depTds","Table","condensed","striped","bordered","colSpan","ExtractionExpander","fk","foreignTable","labelField","lookup","experimental","s","row","foreignItem","find","td","tdi","k","textColsOf","solventSchema","solvent","solventName","anyOf","enum","Other_solvent","ratio","sep","href","_this2","GenomeExpander","oneOfs","nested","indexOf","lvl1","nestedValues","genomeId","genome_ID","GenBank_accession","RefSeq_accession","ENA_NCBI_accession","MGnify_accession","BioSample_accession","InstrumentExpander","htmlCols","typeSchema","modeSchema","typeLabel","instrument","instrumentation","other_instrument","modeLabel","SampleGrowthConditionsExpander","mediumCols","medium_type","medium","mediumSchema","envSchema","environment","mediumTypeCol","mediumLabel","Other_medium","envLabel","Other_environment","unshift","tsvExport","expanders","gmProps","genome_metabolome_links","foreignKeys","Set","e","has","h","textRow","textCols","toConsumableArray","textTable","tsvUrl","bj","btoa","label2value","hit","jsonDocument","genomes","genomeIDs","samplePreparations","samplePreparationLabels","extractionMethods","extractionMethodLabels","instrumentationMethods","instrumentationMethodLabels","gmRows","metabolomicsFile","genomeID","preferredGenomeID","genome","genome_type","genbankAccession","refseqAccession","ena","mgnify","biosample","pubs","publications","collapseGenome","add","samplePreparationLabel","sample","sample_preparation_method","medium_details","type","mediumValue","sample_preparation","temp","growth_temperature","aeration","Aeration","growingTime","growing_time","phase","growth_phase_OD","cond","other_growth_conditions","metagenomeLabel","metagenomeValue","metagenome_details","metadesc","metagenomic_sample_description","collapseSamplePreparation","extractionMethodLabel","extract","extraction_method","solvents","split","solventString","_solventString$split","_solventString$split2","slicedToArray","solventLabel","solventValue","extraction_methods","parseFloat","other","other_extraction_parameters","collapseExtractionMethod","instrumentationMethodLabel","instr","instrumentation_method","instrTypeLabel","Instrumentation","instrTypeValue","instrumentation_methods","column","mode","range","coll","collision_energy","buf","Buffering","buffering","other_instrumentation","collapseInstrumentationMethod","metabolomics_file","sample_preparation_label","extraction_method_label","instrumentation_method_label","version","personal","metabolomics","GenomeMetabolomicsTable","genomeExpander","sampleExpander","extractionExpander","instrumentExpander","genomeHeaders","ths","sampleHeaders","extractionHeaders","instrumentHeaders","genomeTds","sampleTds","extractionTds","instrumentTds","genomemetabolometsvfn","GNPSMassIVE_ID","download","PairedDataRecord","dataUrl","mimeType","undefined","JSON","stringify","record2dataUrl","submitterProps","submitter","metabolomeProps","metabolome","filename","Button","GenomeMetabolomicsTable_GenomeMetabolomicsTable","GeneSpectraTable_GeneSpectraTable","formFields","collapsible","CollapsibleField","gmarray","uploadRef","ArrayField_default","a","current","click","accept","target","files","file","reader","FileReader","onload","result","tsvParse","formContext","uploadGenomeMetabolomeLinks","readAsText","ref","style","display","App","initDoc","validDoc","formRef","searchLabels","url","form","currentDoc","Error","onSubmit","_ref","onReset","doc","PI_email","PI_institution","PI_name","submitter_email","submitter_institution","submitter_name","MaSSIVE_URL","fillForm","onUpload","fillFormFromFile","evt","parse","validate","errors","reduce","addError","gmIds","spIds","emIds","imIds","genomeMetabolomeLink","includes","msUrls","geneSpectraLink","MS2_URL","loadExample1","fetch","then","json","submit","bind","lib_default","fields","ButtonToolbar","ButtonGroup","bsStyle","PairedDataRecord_PairedDataRecord","Boolean","window","location","hostname","match","ReactDOM","render","react_default","createElement","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.65a869d6.chunk.js","sourcesContent":["import * as React from \"react\";\n\nimport { Glyphicon } from \"react-bootstrap\";\nimport { FieldProps } from \"react-jsonschema-form\";\nimport Select from \"react-select\";\n\nexport class ForeignKeyField extends React.Component<FieldProps, {}> {\n  public state = {\n    open: false,\n    options: []\n  };\n\n  public handleChange = (option: any) => {\n    this.props.onChange(option.value);\n  };\n\n  public loadOptions = () => {\n    const values = this.props.uiSchema.foreignKey.search(this.props.name);\n    return values.map((v: string) => {\n      return { value: v, label: v };\n    });\n  };\n\n  public render() {\n    let field = (\n      <span className=\"form-control\" onClick={this.onOpen}>\n        {this.props.formData || \"Click to select\"}\n        <span className=\"pull-right\">\n          <Glyphicon glyph=\"chevron-down\" />\n        </span>\n      </span>\n    );\n    if (this.state.open && this.state.options.length > 0) {\n      field = (\n        <Select\n          defaultValue={this.props.formData}\n          onChange={this.onClose}\n          options={this.state.options}\n          menuIsOpen={true}\n        />\n      );\n    }\n    return (\n      <div>\n        <label>{this.props.schema.title}</label>\n        <p>{this.props.schema.description}</p>\n        {field}\n      </div>\n    );\n  }\n\n  public onOpen = () => {\n    const options = this.loadOptions();\n    this.setState({ open: true, options });\n  };\n\n  public onClose = (event: any) => {\n    const value = event.value;\n    this.setState(\n      {\n        value,\n        open: false,\n        options: []\n      },\n      () => {\n        this.props.onChange(value);\n      }\n    );\n  };\n}\n","import * as React from 'react';\n\nexport function oneOfSplat(schema: any, prop: string, offset: number) {\n    const splat = new Map<string, JSX.Element>();\n    schema.dependencies[prop].oneOf.forEach((d: any) => {\n        Object.keys(d.properties).filter(p => p !== prop).forEach((p: any) => {\n            splat.set(p, <th key={offset + splat.size}>{d.properties[p].title}</th>);\n        });\n    });\n    return splat;\n}\n","import * as React from \"react\";\n\nimport { Table } from \"react-bootstrap\";\nimport { oneOfSplat } from \"./oneOfSplat\";\n\ninterface IProps {\n  data: any;\n  schema: any;\n}\n\nexport const GeneSpectraTable = (props: IProps) => {\n  if (!props.data.BGC_MS2_links) {\n    return <p>No links between gene clusters and MS2 spectra.</p>;\n  }\n  const mySchema = props.schema.properties.BGC_MS2_links.items;\n  const myProps = mySchema.properties;\n  const depKey = \"link\";\n  const bgcKey = \"BGC_ID\";\n  const cols = Object.keys(myProps).filter(v => v !== depKey && v !== bgcKey);\n  let headers: JSX.Element[] = [];\n  cols.forEach((v: any, i: number) => {\n    const prop = myProps[v];\n    if (prop.title) {\n      headers.push(<th key={i}>{prop.title}</th>);\n    } else {\n      headers.push(<th key={i}>{v}</th>);\n    }\n  });\n\n  const bgcSplat = oneOfSplat(\n    mySchema.properties.BGC_ID,\n    \"BGC\",\n    headers.length\n  );\n  const bgcCols = Array.from(bgcSplat.keys());\n  headers = headers.concat(Array.from(bgcSplat.values()));\n\n  const depSplat = oneOfSplat(mySchema, depKey, headers.length);\n  const depCols = Array.from(depSplat.keys());\n  headers = headers.concat(Array.from(depSplat.values()));\n\n  const rows = props.data.BGC_MS2_links.map((r: any, i: number) => {\n    let tds = cols.map((c: any, ci: number) => {\n      if (c === \"verification\") {\n        return <td key={ci}>{r[c].join(\";\")}</td>;\n      }\n      return <td key={ci}>{r[c]}</td>;\n    });\n\n    const bgcTds = bgcCols.map((c: string, ci: number) => {\n      return <td key={tds.length + ci}>{r.BGC_ID[c]}</td>;\n    });\n    tds = tds.concat(bgcTds);\n\n    const depTds = depCols.map((c: string, ci: number) => {\n      return <td key={tds.length + ci}>{r[c]}</td>;\n    });\n    tds = tds.concat(depTds);\n    return <tr key={i}>{tds}</tr>;\n  });\n\n  return (\n    <Table condensed={true} striped={true} bordered={true}>\n      <thead>\n        <tr>\n          <td colSpan={cols.length} />\n          <td colSpan={bgcCols.length}>{myProps[bgcKey].title}</td>\n          <td colSpan={depCols.length}>{myProps[depKey].title}</td>\n        </tr>\n        <tr>{headers}</tr>\n      </thead>\n      <tbody>{rows}</tbody>\n    </Table>\n  );\n};\n","import * as React from \"react\";\n\nimport { IExpander } from \"./AbstractExpander\";\n\nexport class ExtractionExpander implements IExpander {\n  public fk = \"extraction_method_label\";\n  private foreignTable = \"extraction_methods\";\n  private labelField = \"extraction_method\";\n  private schema: any;\n  private lookup: any[];\n\n  constructor(schema: any, data: any) {\n    this.schema =\n      schema.properties.experimental.properties[\n        this.foreignTable\n      ].items.properties;\n    this.lookup = data.experimental[this.foreignTable];\n  }\n\n  public ths(offset: number) {\n    return this.headers().map((s, i) => <th key={i + offset}>{s}</th>);\n  }\n\n  public tds(row: any, offset: number) {\n    const foreignItem = this.find(row);\n    const foreignCols = this.cols(foreignItem);\n    return foreignCols.map((td, tdi) => {\n      return <td key={tdi + offset}>{td}</td>;\n    });\n  }\n\n  public headers() {\n    return Object.keys(this.schema).map(k => this.schema[k].title);\n  }\n\n  public textCols(row: any): string[] {\n    const foreignItem = this.find(row);\n    return this.textColsOf(foreignItem);\n  }\n\n  private textColsOf(row: any) {\n    const solventsKey = \"solvents\";\n    const solventSchema = this.schema[solventsKey].items.properties.solvent;\n    const sep = ';';\n    return Object.keys(this.schema).map(k => {\n      const v = row[k];\n      if (k === solventsKey) {\n        return v.map((s: any, i: number) => {\n          const solventName = solventSchema.anyOf.find(\n            (r: any) => r.enum[0] === s.solvent\n          ).title;\n          if (solventName === \"Other solvent\") {\n            return `${s.Other_solvent}=${s.ratio}`;\n          }\n          return `${solventName}=${s.ratio}`;\n        }).join(sep);\n      }\n      return v;\n    });\n  }\n\n  private cols(row: any) {\n    const solventsKey = \"solvents\";\n    const solventSchema = this.schema[solventsKey].items.properties.solvent;\n    return Object.keys(this.schema).map(k => {\n      const v = row[k];\n      if (k === solventsKey) {\n        return v.map((s: any, i: number) => {\n          const solventName = solventSchema.anyOf.find(\n            (r: any) => r.enum[0] === s.solvent\n          ).title;\n          let sep = \";\";\n          if (v.length - 1 === i) {\n            sep = \"\";\n          }\n          if (solventName === \"Other solvent\") {\n            return (\n              <span key={s.Other_solvent}>\n                {s.Other_solvent}={s.ratio}\n                {sep}\n              </span>\n            );\n          }\n          return (\n            <span key={s.solvent}>\n              <a href={s.solvent}>{solventName}</a>={s.ratio}\n              {sep}\n            </span>\n          );\n        });\n      }\n    });\n  }\n\n  private find(row: any) {\n    const label = row[this.fk];\n    return this.lookup.find((r: any) => r[this.labelField] === label);\n  }\n}\n","import * as React from \"react\";\n\nimport { IExpander } from \"./AbstractExpander\";\n\nexport class GenomeExpander implements IExpander {\n  public fk = \"genome_ID\";\n  private foreignTable = \"genomes\";\n  private schema: any;\n  private lookup: any[];\n\n  constructor(schema: any, data: any) {\n    this.schema = schema.properties[this.foreignTable].items.properties;\n    this.lookup = data[this.foreignTable];\n  }\n\n  public ths(offset: number) {\n    return this.headers().map((s, i) => <th key={i + offset}>{s}</th>);\n  }\n\n  public tds(row: any, offset: number) {\n    const foreignItem = this.find(row);\n    const foreignCols = this.cols(foreignItem);\n    return foreignCols.map((td, tdi) => {\n      return <td key={tdi + offset}>{td}</td>;\n    });\n  }\n\n  public headers() {\n    const nestedProp = \"genome_ID\";\n    const oneOfProp = \"genome_type\";\n    const oneOfs = this.schema[nestedProp].dependencies[oneOfProp].oneOf;\n    const nested: string[] = [];\n    oneOfs.forEach((oneOf: any) => {\n      Object.keys(oneOf.properties).forEach(k => {\n        if (k === oneOfProp) {\n          if (nested.indexOf(this.schema[nestedProp].title) === -1) {\n            nested.push(this.schema[nestedProp].title);\n          }\n        } else if (nested.indexOf(oneOf.properties[k].title) === -1) {\n          nested.push(oneOf.properties[k].title);\n        }\n      });\n    });\n    const lvl1 = Object.keys(this.schema)\n      .filter(k => k !== nestedProp)\n      .map(k => this.schema[k].title);\n    return nested.concat(lvl1);\n  }\n\n  public textCols(row: any): string[] {\n    const foreignItem = this.find(row);\n    return this.cols(foreignItem);\n  }\n\n  private cols(row: any) {\n    const nestedProp = \"genome_ID\";\n    const oneOfProp = \"genome_type\";\n    const oneOfs = this.schema[nestedProp].dependencies[oneOfProp].oneOf;\n    const nested: string[] = [];\n    const nestedValues: string[] = [];\n    oneOfs.forEach((oneOf: any) => {\n      Object.keys(oneOf.properties).forEach(k => {\n        if (k === oneOfProp) {\n          if (nested.indexOf(nestedProp) === -1) {\n            nested.push(nestedProp);\n            nestedValues.push(row[nestedProp][k]);\n          }\n        } else if (nested.indexOf(k) === -1) {\n          nested.push(k);\n          nestedValues.push(row[nestedProp][k]);\n        }\n      });\n    });\n    const lvl1 = Object.keys(this.schema)\n      .filter(k => k !== nestedProp)\n      .map(k => row[k]);\n    return nestedValues.concat(lvl1);\n  }\n\n  private find(row: any) {\n    const genomeId = row[this.fk];\n    return this.lookup.find(\n      (r: any) =>\n        r.genome_ID.GenBank_accession === genomeId ||\n        r.genome_ID.RefSeq_accession === genomeId ||\n        r.genome_ID.ENA_NCBI_accession === genomeId ||\n        r.genome_ID.MGnify_accession === genomeId ||\n        r.BioSample_accession === genomeId\n    );\n  }\n}\n","import * as React from \"react\";\n\nimport { IExpander } from \"./AbstractExpander\";\n\nexport class InstrumentExpander implements IExpander {\n  public fk = \"instrumentation_method_label\";\n  private foreignTable = \"instrumentation_methods\";\n  private labelField = \"instrumentation_method\";\n  private schema: any;\n  private lookup: any[];\n\n  constructor(schema: any, data: any) {\n    this.schema =\n      schema.properties.experimental.properties[\n        this.foreignTable\n      ].items.properties;\n    this.lookup = data.experimental[this.foreignTable];\n  }\n\n  public ths(offset: number) {\n    return this.headers().map((s, i) => <th key={i + offset}>{s}</th>);\n  }\n\n  public tds(row: any, offset: number) {\n    const foreignItem = this.find(row);\n    const foreignCols = this.htmlCols(foreignItem);\n    return foreignCols.map((td, tdi) => {\n      return <td key={tdi + offset}>{td}</td>;\n    });\n  }\n\n  public textCols(row: any) {\n    const foreignItem = this.find(row);\n    return this.textColsOf(foreignItem);\n  }\n\n  public headers() {\n    return Object.keys(this.schema).map(k => this.schema[k].title);\n  }\n\n  private htmlCols(row: any) {\n    const typeKey = \"instrumentation\";\n    const typeSchema = this.schema[typeKey];\n    const modeKey = \"mode\";\n    const modeSchema = this.schema[modeKey];\n    return Object.keys(this.schema).map(k => {\n      const v = row[k];\n      if (k === typeKey) {\n        const typeLabel = typeSchema.properties.instrument.anyOf.find(\n          (r: any) => r.enum[0] === v.instrument\n        ).title;\n        if (typeLabel === \"Other Mass Spectrometer\") {\n          return (\n            <span key={row.instrumentation.other_instrument}>\n              {row.instrumentation.other_instrument}\n            </span>\n          );\n        }\n        return (\n          <a key={v.instrument} href={v.instrument}>\n            {typeLabel}\n          </a>\n        );\n      } else if (k === modeKey) {\n        const modeLabel = modeSchema.anyOf.find((r: any) => r.enum[0] === v)\n          .title;\n        return (\n          <a key={v} href={v}>\n            {modeLabel}\n          </a>\n        );\n      }\n      return v;\n    });\n  }\n\n  private textColsOf(row: any) {\n    const typeKey = \"instrumentation\";\n    const typeSchema = this.schema[typeKey];\n    const modeKey = \"mode\";\n    const modeSchema = this.schema[modeKey];\n    return Object.keys(this.schema).map(k => {\n      const v = row[k];\n      if (k === typeKey) {\n        const typeLabel = typeSchema.properties.instrument.anyOf.find(\n          (r: any) => r.enum[0] === v.instrument\n        ).title;\n        if (typeLabel === \"Other Mass Spectrometer\") {\n          return row.instrumentation.other_instrument;\n        }\n        return typeLabel;\n      } else if (k === modeKey) {\n        const modeLabel = modeSchema.anyOf.find((r: any) => r.enum[0] === v)\n          .title;\n        return modeLabel;\n      }\n      return v;\n    });\n  }\n\n  private find(row: any) {\n    const label = row[this.fk];\n    return this.lookup.find((r: any) => r[this.labelField] === label);\n  }\n}\n","import * as React from \"react\";\n\nimport { IExpander } from \"./AbstractExpander\";\n\nexport class SampleGrowthConditionsExpander implements IExpander {\n  public fk = \"sample_preparation_label\";\n  private foreignTable = \"sample_preparation\";\n  private labelField = \"sample_preparation_method\";\n  private schema: any;\n  private lookup: any[];\n\n  constructor(schema: any, data: any) {\n    this.schema =\n      schema.properties.experimental.properties[\n        this.foreignTable\n      ].items.properties;\n    this.lookup = data.experimental[this.foreignTable];\n  }\n\n  public ths(offset: number) {\n    return this.headers().map((s, i) => <th key={i + offset}>{s}</th>);\n  }\n\n  public tds(row: any, offset: number) {\n    const foreignItem = this.find(row);\n    const foreignCols = this.htmlCols(foreignItem);\n    return foreignCols.map((td, tdi) => {\n      return <td key={tdi + offset}>{td}</td>;\n    });\n  }\n\n  public headers() {\n    const mediumKey = \"medium_details\";\n    const mediumCols = [\n      this.schema[mediumKey].properties.medium_type.title,\n      this.schema[mediumKey].properties.medium.title\n    ];\n    const cols = Object.keys(this.schema).filter(k => k !== mediumKey).map(k => this.schema[k].title);\n    return mediumCols.concat(cols);\n  }\n\n  public textCols(row: any) {\n    const foreignItem = this.find(row);\n    return this.textColsOf(foreignItem);\n  }\n\n  private textColsOf(row: any) {\n    const mediumKey = \"medium_details\";\n    const mediumSchema = this.schema[mediumKey].properties.medium;\n    const envKey = \"metagenome_details\";\n    const envSchema = this.schema[envKey].properties.environment;\n    const mediumTypeCol = row[mediumKey].medium_type;\n    const cols = Object.keys(this.schema).map(k => {\n      const v = row[k];\n      if (k === mediumKey) {\n        const mediumLabel = mediumSchema.anyOf.find(\n          (r: any) => r.enum[0] === v.medium\n        ).title;\n        if (v.medium === \"other\") {\n          return v.Other_medium;\n        } else {\n          return mediumLabel;\n        }\n      } else if (k === envKey) {\n        if (!v.environment) {\n          return undefined;\n        }\n        const envLabel = envSchema.anyOf.find(\n          (r: any) => r.enum[0] === v.environment\n        ).title;\n        if (v.environment === \"other\") {\n          return v.Other_environment;\n        } else {\n          return envLabel;\n        }\n      }\n      return v;\n    });\n    cols.unshift(mediumTypeCol);\n    return cols;\n  }\n\n  private htmlCols(row: any) {\n    const mediumKey = \"medium_details\";\n    const mediumSchema = this.schema[mediumKey].properties.medium;\n    const envKey = \"metagenome_details\";\n    const envSchema = this.schema[envKey].properties.environment;\n    const mediumTypeCol = row[mediumKey].medium_type;\n    const cols = Object.keys(this.schema).map(k => {\n      const v = row[k];\n      if (k === mediumKey) {\n        const mediumLabel = mediumSchema.anyOf.find(\n          (r: any) => r.enum[0] === v.medium\n        ).title;\n        if (v.medium === \"other\") {\n          return (\n            <span>\n              {v.Other_medium}\n            </span>\n          );\n        } else {\n          return (\n            <a key={v.medium} href={v.medium}>\n              {mediumLabel}\n            </a>\n          );\n        }\n      } else if (k === envKey) {\n        if (!v.environment) {\n          return undefined;\n        }\n        const envLabel = envSchema.anyOf.find(\n          (r: any) => r.enum[0] === v.environment\n        ).title;\n        if (v.environment === \"other\") {\n          return v.Other_environment;\n        } else {\n          return (\n            <a key={v} href={v}>\n              {envLabel}\n            </a>\n          );\n        }\n      }\n      return v;\n    });\n    cols.unshift(mediumTypeCol);\n    return cols;\n  }\n\n  private find(row: any) {\n    const label = row[this.fk];\n    return this.lookup.find((r: any) => r[this.labelField] === label);\n  }\n}\n","import { IExpander } from './expanders/AbstractExpander';\nimport { ExtractionExpander } from './expanders/ExtractionExpander';\nimport { GenomeExpander } from './expanders/GenomeExpander';\nimport { InstrumentExpander } from './expanders/InstrumentExpander';\nimport { SampleGrowthConditionsExpander } from './expanders/SampleGrowthConditionsExpander';\n\nexport function textTable(schema: any, data: any): string[][] {\n    const expanders: IExpander[] = [\n        new GenomeExpander(schema, data),\n        new SampleGrowthConditionsExpander(schema, data),\n        new ExtractionExpander(schema, data),\n        new InstrumentExpander(schema, data),\n    ];\n    const gmProps = schema.properties.genome_metabolome_links.items.properties;\n    const foreignKeys = new Set(expanders.map(e => e.fk));\n    const cols = Object.keys(gmProps).filter(k => !foreignKeys.has(k));\n    const headers: string[] = cols.map((s) => {\n        const field = gmProps[s];\n        return field.title;\n    });\n    expanders.forEach(e => e.headers().forEach(h => headers.push(h)));\n    const gmRows = data.genome_metabolome_links;\n    const rows: string[][] = gmRows.map((row: any, i: number) => {\n        const textRow = cols.map((td, tdi) => {\n            return row[td];\n        });\n        expanders.forEach(e => e.textCols(row).forEach(c => textRow.push(c)));\n        return textRow;\n    });\n    return [headers, ...rows];\n}\n\nfunction tsvExport(schema: any, data: any) {\n    const newline = '\\n';\n    const sep = '\\t';\n    return textTable(schema, data).map(r => r.join(sep)).join(newline);\n}\n\nexport function tsvUrl(schema: any, data: any) {\n    const mimeType = 'text/tab-separated-values';\n    const bj = btoa(tsvExport(schema, data));\n    return `data:${mimeType};base64,${bj}`;\n}\n\nfunction label2value(label: string, oneOf: any[]) {\n    const hit = oneOf.find(e => e.title === label);\n    if (hit) {\n        return hit.enum[0];\n    }\n    return hit;\n}\n\nfunction collapseSamplePreparation(row: any, schema: any) {\n     const sample: any = {\n        sample_preparation_method: row['Sample Growth Conditions Label'],\n        medium_details: {}\n    }\n    const type = row['Medium type'];\n    if (type) {\n        sample.medium_details.medium_type = type;\n    }\n     const mediumLabel = row['Growth medium'];\n    if (mediumLabel) {\n        const mediumValue = label2value(mediumLabel, schema.properties.experimental.properties.sample_preparation.items.properties.medium_details.properties.medium.anyOf);\n        if (mediumValue) {\n            sample.medium_details.medium = mediumValue;\n        } else {\n            sample.medium_details.Other_medium = mediumLabel;\n        }\n    }\n    const temp = row['Growth temperature'];\n    if (temp) {\n        sample.growth_temperature = temp*1;\n    }\n    const aeration = row.Aeration;\n    if (aeration) {\n        sample.aeration = aeration;\n    }\n    const growingTime = row['Growth time'];\n    if (growingTime) {\n        sample.growing_time = growingTime*1;\n    }\n    const phase = row['Growth phase or OD'];\n    if (phase) {\n        sample.growth_phase_OD = phase;\n    }\n    const cond = row['Other growth conditions'];\n    if (cond) {\n        sample.other_growth_conditions = cond;\n    }\n    const metagenomeLabel = row['Metagenome details'];\n    const metagenomeValue = label2value(metagenomeLabel, schema.properties.experimental.properties.sample_preparation.items.properties.metagenome_details.properties.environment.anyOf);\n    if (metagenomeValue) {\n        sample.metagenome_details = {environment: metagenomeValue};\n    } else {\n        sample.metagenome_details = {Other_environment: metagenomeLabel};\n    }\n    const metadesc = row['Metagenomic sample description'];\n    if (metadesc) {\n        sample.metagenomic_sample_description = metadesc;\n    }\n    return sample;\n}\n\nfunction collapseExtractionMethod(row: any, schema: any) {\n    const extract: any = {\n        extraction_method: row['Extraction Method Label'],\n        solvents: []\n    };\n    const solventsString: string = row['Extraction solvent'];\n    solventsString.split(';').forEach(solventString => {\n        const [solventLabel, ratio] = solventString.split('=');\n        const solventValue = label2value(solventLabel, schema.properties.experimental.properties.extraction_methods.items.properties.solvents.items.properties.solvent.anyOf);\n        if (solventValue) {\n            extract.solvents.push({\n                solvent: solventValue, \n                ratio: parseFloat(ratio)\n            });\n        } else {\n            extract.solvents.push({\n                Other_solvent: solventLabel, \n                ratio: parseFloat(ratio)\n            });\n        }\n    });\n    const other = row['Other extraction details'];\n    if (other) {\n        extract.other_extraction_parameters = other;\n    }\n    return extract;\n}\n\nfunction collapseInstrumentationMethod(row: any, schema: any) {\n    const instr: any = {\n        instrumentation_method: row['Instrumentation Method Label']\n    };\n    const instrTypeLabel = row.Instrumentation;\n    const instrTypeValue = label2value(instrTypeLabel, schema.properties.experimental.properties.instrumentation_methods.items.properties.instrumentation.properties.instrument.anyOf);\n    if (instrTypeValue) {\n        instr.instrumentation = {instrument: instrTypeValue}\n    } else {\n        instr.instrumentation = {other_instrument: instrTypeLabel}\n    }\n    const column = row['Column details'];\n    if (column) {\n        instr.column = column;\n    }\n    const mode = row['Instrument mode'];\n    if (mode) {\n        instr.mode = label2value(mode, schema.properties.experimental.properties.instrumentation_methods.items.properties.mode.anyOf);\n    }\n    const range = row['Mass range'];\n    if (range) {\n        instr.range = range;\n    }\n    const coll = row['Collision energy'];\n    if (coll) {\n        instr.collision_energy = coll;\n    }\n    const buf = row.Buffering;\n    if (buf) {\n        instr.buffering = buf;\n    }\n    const other = row['Other instrumentation information'];\n    if (other) {\n        instr.other_instrumentation = other;\n    }\n    return instr;\n}\n\nfunction preferredGenomeID(row: any) {\n    return row['GenBank accession number'] || \n        row['RefSeq_accession number'] ||\n        row['ENA/NCBI accession number'] ||\n        row['MGnify accession number'] ||\n        row['BioSample accession number']\n    ;\n}\n\nfunction collapseGenome(row: any) {\n    const genome: any = {\n        genome_ID: {\n            genome_type: row['Genome or Metagenome']\n        }\n    };\n    const genbankAccession = row['GenBank accession number'];\n    if (genbankAccession) {\n        genome.genome_ID.GenBank_accession = genbankAccession;\n    }\n    const refseqAccession = row['RefSeq accession number'];\n    if (refseqAccession) {\n        genome.genome_ID.RefSeq_accession = refseqAccession;\n    }\n    const ena = row['ENA/NCBI accession number'];\n    if (ena) {\n        genome.genome_ID.ENA_NCBI_accession = ena;\n    }\n    const mgnify = row['MGnify accession number'];\n    if (mgnify) {\n        genome.genome_ID.MGnify_accession = mgnify;\n    }\n    const biosample = row['BioSample accession number'];\n    if (biosample) {\n        genome.BioSample_accession = biosample;\n    }\n    const pubs = row['Key publications'];\n    if (pubs) {\n        genome.publications = pubs;\n    }\n    return genome;\n}\n\nexport function jsonDocument(schema: any, rows: any) {\n    const genomes: any[] = [];\n    const genomeIDs = new Set();\n    const samplePreparations: any[] = [];\n    const samplePreparationLabels = new Set();\n    const extractionMethods: any[] = [];\n    const extractionMethodLabels = new Set();\n    const instrumentationMethods: any[] = [];\n    const instrumentationMethodLabels = new Set();\n    const gmRows: any[] = rows.map((row: any) => {\n        const metabolomicsFile = row['Location of metabolomics data file'];\n        const genomeID = preferredGenomeID(row);\n        if (!genomeIDs.has(genomeID)) {\n            genomes.push(collapseGenome(row));\n            genomeIDs.add(genomeID);\n        }\n        const samplePreparationLabel = row['Sample Growth Conditions Label'];\n        if (!samplePreparationLabels.has(samplePreparationLabel)) {\n            samplePreparations.push(collapseSamplePreparation(row, schema));\n            samplePreparationLabels.add(samplePreparationLabel);\n        }\n        const extractionMethodLabel = row['Extraction Method Label'];\n        if (!extractionMethodLabels.has(extractionMethodLabel)) {\n            extractionMethods.push(collapseExtractionMethod(row, schema));\n            extractionMethodLabels.add(extractionMethodLabel);\n        }\n        const instrumentationMethodLabel = row['Instrumentation Method Label'];\n        if (!instrumentationMethodLabels.has(instrumentationMethodLabel)) {\n            instrumentationMethods.push(collapseInstrumentationMethod(row, schema));\n            instrumentationMethodLabels.add(instrumentationMethodLabel);\n        }\n        return {\n            genome_ID: genomeID,\n            metabolomics_file: metabolomicsFile,\n            sample_preparation_label: samplePreparationLabel,\n            extraction_method_label: extractionMethodLabel,\n            instrumentation_method_label: instrumentationMethodLabel\n        };\n    });\n    return {\n        version: \"1\",\n        personal: {},\n        metabolomics: {},\n        genomes,\n        experimental: {\n            sample_preparation: samplePreparations,\n            extraction_methods: extractionMethods,\n            instrumentation_methods: instrumentationMethods\n        },\n        genome_metabolome_links: gmRows\n    }\n}","import * as React from \"react\";\n\nimport { Table } from 'react-bootstrap';\n\nimport { ExtractionExpander } from './expanders/ExtractionExpander';\nimport { GenomeExpander } from './expanders/GenomeExpander';\nimport { InstrumentExpander } from './expanders/InstrumentExpander';\nimport { SampleGrowthConditionsExpander } from './expanders/SampleGrowthConditionsExpander';\nimport { tsvUrl } from './textTable';\n\ninterface IProps {\n    data: any;\n    schema: any;\n}\n\nexport const GenomeMetabolomicsTable = (props: IProps) => {\n    if (!props.data.genome_metabolome_links) {\n        return <p>No links between (meta)genomes and metabolimics data files.</p>;\n    }\n    const genomeExpander = new GenomeExpander(props.schema, props.data);\n    const sampleExpander = new SampleGrowthConditionsExpander(props.schema, props.data);\n    const extractionExpander = new ExtractionExpander(props.schema, props.data);\n    const instrumentExpander = new InstrumentExpander(props.schema, props.data);\n    const gmProps = props.schema.properties.genome_metabolome_links.items.properties;\n    const foreignKeys = new Set([\n        genomeExpander.fk,\n        sampleExpander.fk,\n        extractionExpander.fk,\n        instrumentExpander.fk,\n    ]);\n    const cols = Object.keys(gmProps).filter(k => !foreignKeys.has(k));\n\n    let headers = cols.map((s) => {\n        const field = gmProps[s];\n        return <th key={s}>{field.title}</th>;\n    });\n    const genomeHeaders = genomeExpander.ths(headers.length);\n    headers = headers.concat(genomeHeaders);\n    const sampleHeaders = sampleExpander.ths(headers.length);\n    headers = headers.concat(sampleHeaders);\n    const extractionHeaders = extractionExpander.ths(headers.length);\n    headers = headers.concat(extractionHeaders);\n    const instrumentHeaders = instrumentExpander.ths(headers.length);\n    headers = headers.concat(instrumentHeaders);\n\n    const gmRows = props.data.genome_metabolome_links;\n    const rows = gmRows.map((row: any, i: number) => {\n        let tds = cols.map((td, tdi) => {\n            if (td === 'Metabolomics_Data_File') {\n                return (<td key={tdi}><a href={row[td]}>{row[td]}</a></td>);\n            }\n            return (<td key={tdi}>{row[td]}</td>);\n        });\n\n        const genomeTds = genomeExpander.tds(row, tds.length);\n        tds = tds.concat(genomeTds);\n        const sampleTds = sampleExpander.tds(row, tds.length);\n        tds = tds.concat(sampleTds);\n        const extractionTds = extractionExpander.tds(row, tds.length);\n        tds = tds.concat(extractionTds);\n        const instrumentTds = instrumentExpander.tds(row, tds.length);\n        tds = tds.concat(instrumentTds);\n        return (\n            <tr key={i}>\n                {tds}\n            </tr>\n        );\n    });\n    const genomemetabolometsvfn = 'paired-' + props.data.metabolomics.GNPSMassIVE_ID + 'genome-metabolome.tsv';\n    return (\n        <div>\n            <Table condensed={true} striped={true} bordered={true}>\n                <thead>\n                    <tr>\n                        <th colSpan={cols.length} />\n                        <th colSpan={genomeHeaders.length}>{gmProps[genomeExpander.fk].title}</th>\n                        <th colSpan={sampleHeaders.length}>{gmProps[sampleExpander.fk].title}</th>\n                        <th colSpan={extractionHeaders.length}>{gmProps[extractionExpander.fk].title}</th>\n                        <th colSpan={instrumentHeaders.length}>{gmProps[instrumentExpander.fk].title}</th>\n                    </tr>\n                    <tr>\n                        {headers}\n                    </tr>\n                </thead>\n                <tbody>\n                    {rows}\n                </tbody>\n            </Table>\n            <a href={tsvUrl(props.schema, props.data)} download={genomemetabolometsvfn}>tab delimited downoad</a>\n        </div>\n    );\n}","import * as React from \"react\";\n\nimport { Button, Glyphicon } from \"react-bootstrap\";\n\nimport { GeneSpectraTable } from \"./GeneSpectraTable\";\nimport { GenomeMetabolomicsTable } from \"./GenomeMetabolomicsTable\";\n\ninterface IProps {\n  data: any;\n  schema: any;\n}\n\nfunction record2dataUrl(data: object, mimeType = \"application/json\") {\n  const bj = btoa(JSON.stringify(data, null, 4));\n  return `data:${mimeType};base64,${bj}`;\n}\n\nexport const PairedDataRecord = (props: IProps) => {\n    const dataUrl = record2dataUrl(props.data);\n    const submitterProps = props.schema.properties.personal.properties;\n    const submitter = Object.keys(submitterProps).map((s: string) => {\n        const field = submitterProps[s];\n        return <li key={s}>{field.title}: {props.data.personal[s]}</li>;\n    });\n\n    const metabolomeProps = props.schema.properties.metabolomics.properties;\n    const metabolome = Object.keys(metabolomeProps).map((s: string) => {\n        const field = metabolomeProps[s];\n        return <li key={s}>{field.title}: {props.data.metabolomics[s]}</li>;\n    });\n\n    const GNPSMassIVE_ID = props.data.metabolomics.GNPSMassIVE_ID;\n    const filename = `paired_datarecord_${GNPSMassIVE_ID}.json`;\n    return (\n        <div>\n            <h3>iOMEGA Paired data record:</h3>\n            <Button href={dataUrl} download={filename}><Glyphicon glyph=\"download\" /> Download</Button>\n            <h2>Submitter Information</h2>\n            <ul>\n                {submitter}\n            </ul>\n            <h2>Metabolomics project details</h2>\n            <ul>\n                {metabolome}\n            </ul>\n\n            <h2>Links between genomes and metabolomics data</h2>\n            <GenomeMetabolomicsTable data={props.data} schema={props.schema} />\n\n            <h2>Linked gene clusters and MS2 spectra</h2>\n            <GeneSpectraTable data={props.data} schema={props.schema} />\n        </div>\n    );\n};\n","import * as React from \"react\";\n\nimport { JSONSchema6 } from \"json-schema\";\nimport { Button, ButtonGroup, ButtonToolbar, Glyphicon } from \"react-bootstrap\";\nimport Form, { ISubmitEvent } from \"react-jsonschema-form\";\nimport CollapsibleField from \"react-jsonschema-form-extras/lib/CollapsibleField\";\n\nimport { ForeignKeyField } from \"./ForeignKeyField\";\nimport { GenomeMetabolomeLinksField } from './GenomeMetabolomeLinksField';\nimport { PairedDataRecord } from \"./PairedDataRecord\";\n\nimport \"./App.css\";\nimport { jsonDocument } from './textTable';\n\ninterface IState {\n  schema: JSONSchema6;\n  uiSchema: any;\n  initDoc: any;\n  validDoc: any;\n}\n\nconst formFields = {\n  collapsible: CollapsibleField,\n  foreignKey: ForeignKeyField,\n  gmarray: GenomeMetabolomeLinksField,\n};\n\nclass App extends React.Component<{}, IState> {\n  public state: IState = { schema: {}, uiSchema: {}, initDoc: {}, validDoc: undefined };\n  private uploadRef: React.RefObject<HTMLInputElement>;\n  private formRef: React.RefObject<Form<any>>;\n\n  constructor(props: {}) {\n    super(props);\n    this.uploadRef = React.createRef();\n    this.formRef = React.createRef();\n  }\n\n  public componentDidMount() {\n    fetch(\"schema.json\")\n      .then(r => r.json())\n      .then(schema => this.setState({ schema }));\n    fetch(\"uischema.json\")\n      .then(r => r.json())\n      .then(uiSchema => {\n        // inject foreign key search method\n        uiSchema.genome_metabolome_links.items.genome_ID.foreignKey.search = this.searchLabels.bind(\n          this\n        );\n        uiSchema.genome_metabolome_links.items.sample_preparation_label.foreignKey.search = this.searchLabels.bind(\n          this\n        );\n        uiSchema.genome_metabolome_links.items.extraction_method_label.foreignKey.search = this.searchLabels.bind(\n          this\n        );\n        uiSchema.genome_metabolome_links.items.instrumentation_method_label.foreignKey.search = this.searchLabels.bind(\n          this\n        );\n        uiSchema.BGC_MS2_links.items.MS2_URL.foreignKey.search = this.searchLabels.bind(\n          this\n        );\n        this.setState({ uiSchema });\n      });\n  }\n\n  public searchLabels = (url: string) => {\n    const form = this.formRef.current;\n    if (!form) {\n      return [];\n    }\n    const currentDoc = (form.state as any).formData;\n    if (!currentDoc) {\n      return [];\n    }\n    if (url === \"genome_ID\") {\n      if (!currentDoc.genomes) {\n        return [];\n      }\n\n      const labels = currentDoc.genomes.map(\n        (r: any) =>\n          r.genome_ID.GenBank_accession ||\n          r.genome_ID.RefSeq_accession ||\n          r.genome_ID.ENA_NCBI_accession ||\n          r.genome_ID.MGnify_accession ||\n          r.BioSample_accession\n      );\n      return labels;\n    } else if (url === \"sample_preparation_label\") {\n      if (\n        !currentDoc.experimental.sample_preparation\n      ) {\n        return [];\n      }\n\n      const labels = currentDoc.experimental.sample_preparation.map(\n        (r: any) => r.sample_preparation_method\n      );\n      return labels;\n    } else if (url === \"extraction_method_label\") {\n      if (\n        !currentDoc.experimental.extraction_methods\n      ) {\n        return [];\n      }\n\n      const labels = currentDoc.experimental.extraction_methods.map((r: any) => r.extraction_method);\n      return labels;\n    } else if (url === \"instrumentation_method_label\") {\n      if (\n        currentDoc.experimental.instrumentation_methods === undefined\n      ) {\n        return [];\n      }\n\n      const labels = currentDoc.experimental.instrumentation_methods.map((r: any) => r.instrumentation_method);\n      return labels;\n    } else if (url === 'MS2_URL') {\n      if (!currentDoc.genome_metabolome_links) {\n        return [];\n      }\n      const labels = currentDoc.genome_metabolome_links.map((r: any) => r.metabolomics_file);\n      return labels;\n    }\n    throw new Error(\"Unknown link\");\n  };\n\n  public onSubmit = ({ formData }: ISubmitEvent<object>) => {\n    this.setState({ validDoc: formData, initDoc: formData });\n  };\n\n  public onReset = () => {\n    this.setState({ initDoc: {}, validDoc: undefined });\n  }\n\n  public uploadGenomeMetabolomeLinks = (rows: any[]) => {\n    const doc = jsonDocument(this.state.schema, rows);\n    const formData: any = this.state.initDoc;\n    formData.genomes = doc.genomes;\n    formData.experimental = doc.experimental;\n    formData.genome_metabolome_links = doc.genome_metabolome_links;\n    if (!formData.personal) {\n      formData.personal = {\n        PI_email: undefined,\n        PI_institution: undefined,\n        PI_name: undefined,\n        submitter_email: undefined,\n        submitter_institution: undefined,\n        submitter_name: undefined,\n      };\n    }\n    if (!formData.metabolomics) {\n      formData.metabolomics = {\n        GNPSMassIVE_ID: undefined,\n        MaSSIVE_URL: undefined\n      }\n    }\n    this.fillForm(formData);\n  }\n\n  public render() {\n    const formContext = {\n      uploadGenomeMetabolomeLinks: this.uploadGenomeMetabolomeLinks\n    };\n    return (\n      <div className=\"App\">\n        {Object.keys(this.state.schema).length > 0 &&\n          Object.keys(this.state.uiSchema).length > 0 && (\n            <Form\n              schema={this.state.schema}\n              uiSchema={this.state.uiSchema}\n              fields={formFields}\n              formData={this.state.initDoc}\n              onSubmit={this.onSubmit}\n              validate={this.validate}\n              formContext={formContext}\n              ref={this.formRef}\n            >\n              <ButtonToolbar>\n                <ButtonGroup>\n                  <Button onClick={this.loadExample1} title=\"Load example dataset\">\n                    <Glyphicon glyph=\"paperclip\" /> Example\n                  </Button>\n                  <Button onClick={this.onUpload} title=\"Upload JSON file\">\n                    <Glyphicon glyph=\"upload\" /> Upload\n                    <input\n                      type=\"file\"\n                      accept=\"application/json,.json\"\n                      onChange={this.fillFormFromFile}\n                      ref={this.uploadRef}\n                      style={{ display: \"none\" }}\n                    />\n                  </Button>\n                </ButtonGroup>\n                <ButtonGroup>\n                  <Button type=\"submit\" bsStyle=\"primary\">\n                    <Glyphicon glyph=\"ok\" /> Save\n                  </Button>\n                  <Button type=\"reset\" onClick={this.onReset}>\n                    <Glyphicon glyph=\"remove\" /> Reset\n                  </Button>\n                </ButtonGroup>\n              </ButtonToolbar>\n            </Form>\n          )}\n        {this.state.validDoc && (\n          <PairedDataRecord\n            data={this.state.validDoc}\n            schema={this.state.schema}\n          />\n        )}\n      </div>\n    );\n  }\n \n  public onUpload = () => {\n    if (this.uploadRef.current) {\n      this.uploadRef.current.click();\n    }\n  };\n\n  public fillFormFromFile = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (!event.target.files) {\n      return;\n    }\n    const file = event.target.files[0];\n    const reader = new FileReader();\n    reader.onload = evt => {\n      if (reader.result) {\n        const formData = JSON.parse(reader.result as string);\n        this.fillForm(formData);\n      }\n    };\n    reader.readAsText(file);\n  };\n\n  public validate = (formData: any, errors: any) => {\n    if (formData.experimental.extraction_methods) {\n      formData.experimental.extraction_methods.forEach((e: any, i: number) => {\n        const ratioTotal = e.solvents.reduce((c: number, s: any) => {\n          return s.ratio + c;\n        }, 0);\n        if (ratioTotal > 1) {\n          errors.experimental.extraction_methods[i].solvents.addError(\n            'Combined ratio not within 0 and 1'\n          );\n        }\n      });\n    }\n    if (!formData.genome_metabolome_links) {\n      return errors;\n    }\n    const gmIds = this.searchLabels(\"genome_ID\");\n    const spIds = this.searchLabels(\"sample_preparation_label\");\n    const emIds = this.searchLabels(\"extraction_method_label\");\n    const imIds = this.searchLabels(\"instrumentation_method_label\");\n    formData.genome_metabolome_links.forEach(\n      (genomeMetabolomeLink: any, i: number) => {\n        if (\n          genomeMetabolomeLink.genome_ID &&\n          !gmIds.includes(genomeMetabolomeLink.genome_ID)\n        ) {\n          errors.genome_metabolome_links[i].genome_ID.addError(\n            \"Invalid selection\"\n          );\n        }\n        if (\n          genomeMetabolomeLink.sample_preparation_label &&\n          !spIds.includes(genomeMetabolomeLink.sample_preparation_label)\n        ) {\n          errors.genome_metabolome_links[i].sample_preparation_label.addError(\n            \"Invalid selection\"\n          );\n        }\n        if (\n          genomeMetabolomeLink.extraction_method_label &&\n          !emIds.includes(genomeMetabolomeLink.extraction_method_label)\n        ) {\n          errors.genome_metabolome_links[i].extraction_method_label.addError(\n            \"Invalid selection\"\n          );\n        }\n        if (\n          genomeMetabolomeLink.instrumentation_method_label &&\n          !imIds.includes(genomeMetabolomeLink.instrumentation_method_label)\n        ) {\n          errors.genome_metabolome_links[\n            i\n          ].instrumentation_method_label.addError(\"Invalid selection\");\n        }\n      }\n    );\n    if (formData.BGC_MS2_links) {\n      const msUrls = this.searchLabels(\"MS2_URL\");\n      formData.BGC_MS2_links.forEach((geneSpectraLink: any, i: number) => {\n        if (geneSpectraLink.MS2_URL && !msUrls.includes(geneSpectraLink.MS2_URL)) {\n          errors.BGC_MS2_links[i].MS2_URL.addError(\"Invalid selection\");\n        }\n      });\n    }\n    return errors;\n  };\n\n  public loadExample1 = () => {\n    fetch('examples/paired_datarecord_MSV000078839_example.json')\n      .then(r => r.json())\n      .then(this.fillForm);\n  }\n\n  private fillForm = (doc: any) => {\n    this.setState({ initDoc: doc, validDoc: undefined }, () => {\n      const form = this.formRef.current;\n      if (form) {\n        // dts for form does not include submit(), but is documented at\n        // https://react-jsonschema-form.readthedocs.io/en/latest/#submit-form-programmatically\n        (form as any).submit();\n      }\n    });\n  }\n}\n\nexport default App;\n","import * as React from \"react\";\n\nimport { tsvParse } from 'd3-dsv';\nimport { Button, Glyphicon } from 'react-bootstrap';\nimport { FieldProps } from 'react-jsonschema-form';\nimport ArrayField from 'react-jsonschema-form/lib/components/fields/ArrayField';\n\nexport const GenomeMetabolomeLinksField = (props: FieldProps) => {\n    const uploadRef = React.useRef<HTMLInputElement>(null);\n\n    function onClick() {\n        if (uploadRef.current) {\n            uploadRef.current.click();\n        }\n    }\n\n    function fillLinksFromFile(event: React.ChangeEvent<HTMLInputElement>) {\n        if (!event.target.files) {\n            return;\n          }\n          const file = event.target.files[0];\n          const reader = new FileReader();\n          reader.onload = () => {\n            if (reader.result) {\n              const rows = tsvParse(reader.result as string);\n              props.formContext.uploadGenomeMetabolomeLinks(rows);\n            }\n          };\n          reader.readAsText(file);\n    }\n\n    return (\n        <div>\n            <ArrayField {...props}/>\n            <Button onClick={onClick} title=\"Upload links from tab delimited file, will replace existing links, (meta)genomes and metabolomics experimental details\">\n                <Glyphicon glyph=\"upload\"/> Upload links\n                <input\n                    type=\"file\"\n                    accept=\"text/tab-separated-values,.tsv,.txt\"\n                    onChange={fillLinksFromFile}\n                    ref={uploadRef}\n                    style={{ display: \"none\" }}\n                />\n            </Button>\n        </div>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/css/bootstrap-theme.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}